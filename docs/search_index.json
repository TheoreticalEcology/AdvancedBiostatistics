[["index.html", "Advanced Biostatistics with R 1 Preface", " Advanced Biostatistics with R Florian Hartig 2022-06-11 1 Preface The aim of this course is to be able to gain a good theoretical and practical understanding of the statistical problem of estimating an effect: We have a response variable and want to understand how this response variable is influenced by a number of other factors. Truly understanding this problem will require mastering a number of skills, in particular: Understanding of the fundamental statistical indicators in regression analysis (p-value, estimator) and their quality (power, bias, error, coverage), good understanding of causal inference in a regression context, and its relation to model selection, understanding of all building blocks of the “advanced GLMM framework”, i.e. GLM, random effects, GAM, correlation structures, knowledge of standard non-parametric evaluation methods such as parametric and non-parametric bootstrap, cross-validation, and the ability to use all of these methods in an applied data analysis. This is what we will mainly train in this course. Don’t worry if you think that this sounds too simple. We could spend an entire week to only understand the p-value, no problem. We will still only scratch the surface. But I want to make sure that you get an overview of these topics and are confident enough to run a realistic scientific analysis on your own. Additionally, we will shortly cover advanced topics that lead into the area of machine learning and predictive inference, for example regularization (L1 / L2 penalty), as well as regression trees and the associated methods (e.g. boosting, bagging) as well as model averaging. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License "],["reminder.html", "2 Reminder: R basics 2.1 Your R System 2.2 Operating with data in R 2.3 Applying Functions and Aggregates Across a Data Set 2.4 Plotting 2.5 Additional Resources", " 2 Reminder: R basics This chapter reminds you about basic R data types and how to operate on them. Also suitable for self-study prior to the course! 2.1 Your R System In this course, we work with the combination of R + RStudio. R is the calculation engine that performs the computations. RStudio is the editor that helps you sending inputs to R and collect outputs. Make sure you have a recent version of R + RStudio installed on your computer. If you have never used RStudio, here is an introductory video. For Windows / Mac, R should work out of the box. For other UNIX based systems, may also need to install build-essential gfortran libmagick++-dev r-base-dev cmake If you are new to installing packages on Debian / Ubuntu, etc., type the following: sudo apt update &amp;&amp; sudo apt install -y --install-recommends build-essential gfortran libmagick++-dev r-base-dev cmake If you use other operating systems, you presumably will be able to install the necessary packages on your own. 2.1.1 Installing Libraries The R engine comes with a number of base functions, but one of the great things about R is that you can extend these based functions by libraries that can be programmed by anyone. In principle, you can install libraries from any website or file. In practice, however, most commonly used libraries are distributed via two major repositories. For statistical methods, this is CRAN, and for bioinformatics, this is Bioconductor. To install a package from a library, use the command install.packages(LIBRARY) Exchanging LIBRARY with the name of the library you want to install. The default is to search the package in CRAN, but you can specify other repositories or file locations in the function. To save typing for you, you can install an entire list of libraries that you will need by exexcuting the following commands: install.packages(&quot;ape&quot;) install.packages(&quot;bipartide&quot;) install.packages(&quot;boot&quot;) install.packages(&quot;bootstrap&quot;) install.packages(&quot;brms&quot;) install.packages(&quot;car&quot;) install.packages(&quot;caper&quot;) install.packages(&quot;devtools&quot;) install.packages(&quot;DHARMa&quot;) install.packages(&quot;effects&quot;) install.packages(&quot;gdata&quot;) install.packages(&quot;geiger&quot;) install.packages(&quot;glmmTMB&quot;) install.packages(&quot;knitr&quot;) install.packages(&quot;lavaan&quot;) install.packages(&quot;lavaanPlot&quot;) install.packages(&quot;lme4&quot;) install.packages(&quot;lmerTest&quot;) install.packages(&quot;MASS&quot;) install.packages(&quot;mgcv&quot;) install.packages(&quot;mlmRev&quot;) install.packages(&quot;modEvA&quot;) install.packages(&quot;multcomp&quot;) install.packages(&quot;MuMIn&quot;) install.packages(&quot;nlme&quot;) install.packages(&quot;pbkrtest&quot;) install.packages(&quot;phytools&quot;) install.packages(&quot;piecewiseSEM&quot;) install.packages(&quot;quantreg&quot;) install.packages(&quot;readxl&quot;) install.packages(&quot;RLRsim&quot;) install.packages(&quot;robustbase&quot;) install.packages(&quot;semPlot&quot;) install.packages(&quot;stringr&quot;) install.packages(&quot;vegan&quot;) Moreover, in this book, we will often use data sets from the EcoData package, which is not on CRAN. To install the package, run: devtools::install_github(repo = &quot;florianhartig/EcoData&quot;, subdir = &quot;EcoData&quot;, dependencies = TRUE, build_vignettes = TRUE) 2.2 Operating with data in R 2.2.1 Exploring Data Structures A fundamental requirement for working with data is representing it in a computer. In R, if I type x &lt;- 1 the variable x now contains some data, namely the value 1, and I can use x in as a placeholder for the data it contains in further calculations. With only minor differences, the more common syntax x = 1 does the same. If you have worked with R previously, you should know this already, and you should also know that the commands class(x) dim(x) str(x) allow you to explore the structure of variables and the data they contain. Ask yourself, or discuss with your partner(s) - what is the meaning of the three functions, and what is the structure / properties of the following data types in R: Atomic types (which atomic types exist), list, vector, data.frame, matrix, array. Moreover, what is the data type of the iris data set, which is built-in in R under the name iris 2.2.2 Dynamic Typing R is a dynamically typed language, which means that the type of variables is determined automatically depending on what values you supply. Try this: x = 1 class(x) x = &quot;dog&quot; class(x) This also works if a data set already exists, i.e. if you assign a different value, the type will automatically be changed. Look at what happens when we assign a character value to a previously numeric column in a data.frame: iris$Sepal.Length[2] = &quot;dog&quot; str(iris) Note that all numeric values are changed to characters as well. You can try to force back the values to numeric by: iris$Sepal.Length = as.numeric(iris$Sepal.Length) Have a look at what this does to the values in iris$Sepal.Length. Note: The actions above operate on a local copy of the iris data set. You don’t overwrite the base data and can use it again in a new R session or reset it with data(iris). 2.2.3 Data Selection, Slicing and Subsetting 2.2.3.1 Subsetting and Slicing for Single Data Types We often want to select only a subset of our data. You can generally subset from data structures using indices and TRUE/FALSE (or T/F). Here for a vector: vector[1] # First element. vector[1:3] # Elements 1, 2, 3. vector[c(1, 5, 6)] # Elements 1, 5, 6. vector[c(T, T, F, F, T)] # Elements 1, 2, 5. If you use TRUE/FALSE, you must specify a truth value for every (!) position. vector = c(1, 2, 3, 4, 5) vector[c(T, F)] # Does NOT work! For a list, it’s basically the same, except the following points: Elements in lists usually have a name, so you can also access those via list$name. Lists accessed with [] return a list. If you want to select a single element, you have to access it via [[]], as in list[[2]]. For data.frames and other objects with dimension &gt; 2, the same is true, except that you have several indices. matrix[1, 2] # Element in first row, second column. matrix[1:2,] # First two rows, all columns. matrix[, c(T, F ,T)] # All rows, 1st and 3rd column. The syntax matrix[1,] is also called slicing, for obvious reasons. Data.frames are the same as matrices, except that, like with lists of vectors, you can also access columns via names as in data.frame$column. 2.2.3.2 Logic and Slicing Slicing is very powerful if you combine it with logical operators, such as “&amp;” (logical and), “|” (logical or), “==” (equal), “!=” (not equal), “&lt;=”, “&gt;”, etc. Here are a few examples: head(iris[iris$Species == &quot;virginica&quot;, ], 20) # Show first 20 entries only. ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica Note that this is identical to the following: head(subset(iris, Species == &quot;virginica&quot;), 20) # Show first 20 entries only. ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica You can also combine several logical commands: iris[iris$Species == &quot;virginica&quot; &amp; iris$Sepal.Length &gt; 7, ] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 103 7.1 3.0 5.9 2.1 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 136 7.7 3.0 6.1 2.3 virginica Note that this works element-wise! 2.3 Applying Functions and Aggregates Across a Data Set In this chapter, we discuss the most basic functions in R for calculating means, averages or apply other functions across a data set. 2.3.1 Functions Maybe this is a good time to remind you about functions. The two basic options we use in R are: Variables / data structures. Functions. We have already used variables / data structures. Variables have a name and if you type this name in R, you get the values that are inside the respective data structure. Functions are algorithms that are called like: function(variable) For example, you can do: summary(iris) If you want to know what the summary function does, type ?summary, or put your mouse on the function and press “F1”. To be able to work properly with data, you have to know how to define your own functions. This works like the following: squareValue = function(x){ temp = x * x return(temp) } Tasks Try what happens if you type in squareValue(2). Write a function for multiplying 2 values. Hint: This should start with function(x1, x2). Change the first line of the squareValue function to function(x = 3) and try out the following commands: squareValue(2), squareValue(). What is the sense of this syntax? Solution 1 multiply = function(x1, x2){ return(x1 * x2) } 2 squareValue(2) ## [1] 4 3 squareValue = function(x = 3){ temp = x * x return(temp) } squareValue(2) ## [1] 4 squareValue() ## [1] 9 The given value (3 in the example above) is the default value. This value is used automatically, if no value is supplied for the respective variable. Default values can be specified for all variables, but you should put them to the end of the function definition. Hint: In R, it is always useful to name the parameters when using functions. Look at the following example: testFunction = function(a = 1, b, c = 3){ return(a * b + c) } testFunction() ## Error in testFunction(): argument &quot;b&quot; is missing, with no default testFunction(10) ## Error in testFunction(10): argument &quot;b&quot; is missing, with no default testFunction(10, 20) ## [1] 203 testFunction(10, 20, 30) ## [1] 230 testFunction(b = 10, c = 20, a = 30) ## [1] 320 2.3.2 The apply() Function Now that we know functions, we can introduce functions that use functions. One of the most important is the apply function. The apply function applies a function of a data structure, typically a matrix or data.frame. Try the following: apply(iris[,1:4], 2, mean) Tasks Check the help of apply to understand what this does. Why is the first result of apply(iris[,1:4], 2, mean) NA? Check the help of mean to understand this. Try apply(iris[,1:4], 1, mean). Think about what has changed here. What would happen if you use iris instead of iris[,1:4]? Solution 1 ?apply 2 Remember, what we have done above (if you run this part separately, execute the following lines again): iris$Sepal.Length[2] = &quot;Hund&quot; iris$Sepal.Length = as.numeric(iris$Sepal.Length) ## Warning: NAs introduced by coercion apply(iris[,1:4], 2, mean) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## NA 3.057333 3.758000 1.199333 Taking the mean of a character sequence is not possible, so the result is NA (Not Available, missing value(s)). But you can skip missing values with the option na.rm = TRUE of the mean function. To use it with the apply function, pass the argument(s) after. apply(iris[,1:4], 2, mean, na.rm = T) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 5.849664 3.057333 3.758000 1.199333 3 apply(iris[,1:4], 1, mean) ## [1] 2.550 NA 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500 ## [13] 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350 2.650 ## [25] 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400 ## [37] 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375 2.675 2.350 ## [49] 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300 ## [61] 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600 3.275 3.925 3.550 ## [73] 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850 ## [85] 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775 3.400 2.900 3.450 3.525 ## [97] 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575 ## [109] 4.200 4.850 4.200 4.075 4.350 3.800 4.025 4.300 4.200 5.100 4.875 3.675 ## [121] 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025 ## [133] 4.250 3.925 3.925 4.775 4.425 4.200 3.900 4.375 4.450 4.350 3.875 4.550 ## [145] 4.550 4.300 3.925 4.175 4.325 3.950 Arrays (and thus matrices, data.frame(s), etc.) have several dimensions. For a simple 2D array (or matrix), the first dimension is the rows and the second dimension is the columns. The second parameter of the “apply” function specifies the dimension of which the mean should be computed. If you use 1, you demand the row means (150), if you use 2, you request the column means (5, resp. 4). 4 apply(iris, 2, mean) ## Warning in mean.default(newX[, i], ...): argument is not numeric or logical: ## returning NA ## Warning in mean.default(newX[, i], ...): argument is not numeric or logical: ## returning NA ## Warning in mean.default(newX[, i], ...): argument is not numeric or logical: ## returning NA ## Warning in mean.default(newX[, i], ...): argument is not numeric or logical: ## returning NA ## Warning in mean.default(newX[, i], ...): argument is not numeric or logical: ## returning NA ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## NA NA NA NA NA The 5th column is “Species”. These values are not numeric. So the whole data.frame is taken as a data.frame full of characters. apply(iris[,1:4], 2, str) ## num [1:150] 5.1 NA 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## NULL apply(iris, 2, str) ## chr [1:150] &quot;5.1&quot; NA &quot;4.7&quot; &quot;4.6&quot; &quot;5.0&quot; &quot;5.4&quot; &quot;4.6&quot; &quot;5.0&quot; &quot;4.4&quot; &quot;4.9&quot; &quot;5.4&quot; ... ## chr [1:150] &quot;3.5&quot; &quot;3.0&quot; &quot;3.2&quot; &quot;3.1&quot; &quot;3.6&quot; &quot;3.9&quot; &quot;3.4&quot; &quot;3.4&quot; &quot;2.9&quot; &quot;3.1&quot; ... ## chr [1:150] &quot;1.4&quot; &quot;1.4&quot; &quot;1.3&quot; &quot;1.5&quot; &quot;1.4&quot; &quot;1.7&quot; &quot;1.4&quot; &quot;1.5&quot; &quot;1.4&quot; &quot;1.5&quot; ... ## chr [1:150] &quot;0.2&quot; &quot;0.2&quot; &quot;0.2&quot; &quot;0.2&quot; &quot;0.2&quot; &quot;0.4&quot; &quot;0.3&quot; &quot;0.2&quot; &quot;0.2&quot; &quot;0.1&quot; ... ## chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... ## NULL Remark: The “NULL” statement is the return value of apply. str returns nothing (but prints something out), so the returned vector (or array, list, …) is empty, just like: c() ## NULL 2.3.3 The aggregate() Function aggregate() calculates a function per grouping variable. Try out this example: aggregate(. ~ Species, data = iris, FUN = max) ## Species Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 setosa 5.8 4.4 1.9 0.6 ## 2 versicolor 7.0 3.4 5.1 1.8 ## 3 virginica 7.9 3.8 6.9 2.5 Note that max` is the function to get the maximum value, and has nothing to do with your lecturer, who should be spelled Max. The dot is general R syntax and usually refers to “use all columns in the data set”. 2.4 Plotting The following two commands are identical: plot(iris$Sepal.Length, iris$Sepal.Width) plot(Sepal.Width ~ Sepal.Length, data = iris) The second option is preferable, because it allows you to subset data easier. plot(Sepal.Width ~ Sepal.Length, data = iris[iris$Species == &quot;versicolor&quot;, ]) The plot command will use the standard plot depending on the type of variable supplied. For example, if the x axis is a factor, a boxplot will be produced. plot(Sepal.Width ~ Species, data = iris) You can change color, size, shape etc. and this is often useful for visualization. plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, cex = iris$Petal.Length) More on plots in R in this short video: 2.5 Additional Resources As additional R resources for self-study, I recommend: 2.5.1 Books The PDF An introduction to R. An Introduction to Statistical Learning - A simplified version version of a classic machine learning textbook, free PDF for download. Quick R - Good site as a reference with code examples for most standard tasks. Ebook Hands on Programming with R. 2.5.2 Instructional Videos YouTube - R Programming Tutorial - Learn the Basics of Statistical Computing (approx 2h, goes through most basics). YouTube - Statistics with R, Tutorials by MarinStatsLectures - Lots of smaller videos for particular topics. "],["recap.html", "3 Understanding linear regression 3.1 Simple Linear Regression 3.2 Multiple Regression 3.3 Model Choice and Causal Inference", " 3 Understanding linear regression This chapter is a reminder about the basic regression model functions in R. Here a warm-up exercise: fit the regression: summary(lm(Ozone ~ Wind, data = airquality)) And answer / discuss with your partner the following questions: what is the effect of Wind on Ozone? How important is wind to explain Ozone? Next, run the following regressions: summary(lm(Ozone ~ Wind + Temp, data = airquality)) summary(lm(Ozone ~ Wind * Temp, data = airquality)) Why does the effect of Wind on Ozone change each time we change the formula? What is the “true” or correct estimate of the effect of Wind on Ozone? At the end of this chapter, you should be able to answer all these questions! 3.1 Simple Linear Regression OK, after our warm-up, let’s start with the basics. We will again used the data set airquality, which is built-in in R. If you don’t know the data set, have a look at the description via ?airquality and at the variables via str(airquality) To get started, let’s say we want to examine the relationship between Ozone and Wind. Let’s visualize this first: plot(Ozone ~ Wind, data = airquality) OK, I would say there is some dependency there. To quantify this numerically, you could also run cor(airquality$Ozone, airquality$Wind, use = &quot;complete.obs&quot;) to get the (Pearson) correlation, which is negative: -0.6015465. What we want to do now is fitting regression models through the data with the lm() function of R. The function name lm is short for “linear model”. However, remember from the basic course: This model is not called linear because we necessarily fit a linear function. It’s called linear because we express the response (in our case Wind) as a polynomial of the predictor(s). That means, the predictors have linear coefficients but they might themselves be for example quadratic or sinus terms. So \\(y = \\operatorname{f}(x) + \\mathcal{N}(0, \\sigma)\\), where \\(\\operatorname{f}\\) is a polynomial, e.g. \\({a}_{0} + {a}_{1} \\cdot x + {a}_{2} \\cdot {x}^{2}\\), and \\(\\mathcal{N}(0, \\sigma)\\) means that we assume the data scattering as a normal (Gaussian) distribution with unknown standard deviation \\(\\sigma\\) around \\(\\operatorname{f}(x)\\). The model is called linear because when estimating the unknown parameters (we call them “effects”) of the polynomial, we will see that they are all affecting the predictions linearly, and can thus be solved as a system of linear equations. 3.1.1 Fitting and Interpreting the Regression For fitting a line through this data, we have 3 options: Fit a horizontal line (intercept only). Fit only the slope, but assume the line goes through the origin (0, 0). Fit slope and intercept. Option 3 is the most common case, but we will discuss all 3 options here. Intercept Only Model The following code fits an intercept only model, meaning that we assume the line is perfectly flat, and we only adjust it’s height (the intercept). fit = lm(Ozone ~ 1, data = airquality) We can visualize the result via plot(Ozone ~ Wind, data = airquality) abline(fit) and get a summary of the fitted regression coefficients via summary(fit) ## ## Call: ## lm(formula = Ozone ~ 1, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -41.13 -24.13 -10.63 21.12 125.87 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.129 3.063 13.76 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 32.99 on 115 degrees of freedom ## (37 observations deleted due to missingness) We will talk more about this summary later, but for the moment, let’s look only at the coefficients. This tells us that We estimate the mean Ozone (our line) to be at \\(42.12 \\pm 3.1\\) units. The value is significantly different from zero (the t-test always tests \\({H}_{0}\\): “The estimate is zero”). By the way, the value for the intercept is identical to mean(airquality$Ozone, na.rm = T). This is no accident, as the mean is the maximum likelihood estimation for the mean of the normal distribution. Slope Only Model Although rarely sensible, you can also fit a model with just a slope. This only makes sense if you are sure that the line must go through the origin (0, 0) for physical or biological reasons. fit = lm(Ozone ~ Wind + 0, data = airquality) summary(fit) # Alternative for removing the linear term: fit = lm(Ozone ~ Wind - 1, data = airquality) summary(fit) In the results, you can see that we estimate a positive slope, in contradiction to our visual assessment that the data seems negatively correlated. This is because we are forcing the regression line to go through the origin (0, 0). ## ## Call: ## lm(formula = Ozone ~ Wind - 1, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -55.11 -19.34 -2.45 35.71 157.32 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## Wind 3.1398 0.3742 8.391 1.4e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 42.25 on 115 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.3798, Adjusted R-squared: 0.3744 ## F-statistic: 70.41 on 1 and 115 DF, p-value: 1.404e-13 plot(Ozone ~ Wind, data = airquality) abline(fit) Slope and Intercept The most common case will be a model with slope and intercept which is probably corresponds most with our visual assessment. This time, we show the full regression table, so that we can also discuss the other outputs. fit = lm(Ozone ~ Wind, data = airquality) plot(Ozone ~ Wind, data = airquality) abline(fit) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Wind, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -51.572 -18.854 -4.868 15.234 90.000 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 96.8729 7.2387 13.38 &lt; 2e-16 *** ## Wind -5.5509 0.6904 -8.04 9.27e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 26.47 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.3619, Adjusted R-squared: 0.3563 ## F-statistic: 64.64 on 1 and 114 DF, p-value: 9.272e-13 “Call” repeats the regression formula. “Residuals” gives you an indication about how far the observed data scatters around the fitted regression line / function. The regression table (starting with “Coefficients”) provides the estimated parameters, one row for each fitted parameter. The first column is the estimate, the second (standard error) is the 0.63 confidence interval (for 0.95 confidence interval multiply with 1.96), and the fourth column is the p-value for a two-sided test with \\({H}_{0}\\): “Estimate is zero”. The t-value is used for calculation of the p-value and can usually be ignored. The last section of the summary provides information about the model fit. Residual error = Standard deviation of the residuals, 114 df = Degrees of freedom = Observed - fitted parameters. R-squared \\(\\left({R}^{2}\\right)\\) = How much of the signal, respective variance is explained by the model, calculated by \\(\\displaystyle 1 - \\frac{\\text{residual variance}}{\\text{total variance}}\\). Adjusted R-squared = Adjusted for model complexity. F-test = Test against intercept only model, i.e. is the fitted model significantly better than the intercept only model (most relevant for models with &gt; 1 predictor). Discussion What is the meaning of “An effect is not significant”? Solution You should NOT say that the effect is zero, or that the null hypothesis has been accepted. Official language is “there is no significant evidence for an effect(p = XXX)”. If we would like to assess what that means, some people do a post-hoc power analysis (which effect size could have been estimated), but better is typically just to discuss the confidence interval, i.e. look at the confidence interval and say: if there is an effect, we are relatively certain that it is smaller than X, given the confidence interval of XYZ. Discussion Is an effect with three *** more significant / certain than an effect with one *? Solution Many people view it that way, and some even write “highly significant” for *** . It is probably true that we should have a slightly higher confidence in a very small p-value, but strictly speaking, however, there is only significant, or not significant. Interpreting the p-value as a measure of certainty is a slight misinterpretation. Again, if we want to say how certain we are about the effect, it is better to look again at the confidence interval, i.e. the standard error and use this to discuss the precision of the estimate (small confidence interval / standard error = high precision / certainty). Task Fit simple (univariate) linear regression models for the other two numeric variables (Temp and Solar.R) and interpret the results with your partner. Solution fit = lm(Ozone ~ Temp, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Temp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -146.9955 18.2872 -8.038 9.37e-13 *** ## Temp 2.4287 0.2331 10.418 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 plot(Ozone ~ Temp, data = airquality) abline(fit) Temperature seems to have a positive effect of Ozone and this effect is significant. The intercept (value for Ozone at Temp = 0) is negative and also significant. This model explains nearly 50% of the variance of the given data. This holds even for the complexity adjusted \\({R}^{2}\\) measure. 37 observations have missing data and are omitted. Compared to the model with only an intercept, this model is significantly different. fit = lm(Ozone ~ Solar.R, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Solar.R, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -48.292 -21.361 -8.864 16.373 119.136 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 18.59873 6.74790 2.756 0.006856 ** ## Solar.R 0.12717 0.03278 3.880 0.000179 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 31.33 on 109 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.1213, Adjusted R-squared: 0.1133 ## F-statistic: 15.05 on 1 and 109 DF, p-value: 0.0001793 plot(Ozone ~ Solar.R, data = airquality) abline(fit) Solar.R seems to have a positive effect of Ozone and this effect is significant. The intercept (value for Ozone at Solar.R = 0) is positive and also significant. This model explains slightly more than 10% of the variance of the given data. This holds even for the complexity adjusted \\({R}^{2}\\) measure. 42 observations have missing data and are omitted. Thus this model has not the power of the previous one. Compared to the model with only an intercept, this model is significantly different. 3.1.2 Centering of Predictors In the last model fit = lm(Ozone ~ Wind, data = airquality) summary(fit) we saw an intercept of 96 for the Wind parameter. Per definition, the intercept is the predicted value for \\(y\\) (Ozone) at \\(x\\) (Wind) = 0. It’s fine to report this, as long as we are interested in this value. However, there are certain situations where the value at predictor = 0 is not particularly interesting. Let’s look at the regression for Temp, for example: fit = lm(Ozone ~ Temp, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Temp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -146.9955 18.2872 -8.038 9.37e-13 *** ## Temp 2.4287 0.2331 10.418 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 Here, the intercept is -146, which doesn’t make much sense for an ozone concentration, which should be positive. We can see the reason when we plot the results: plot(Ozone ~ Temp, data = airquality, xlim = c(-10, 110), ylim = c(-200, 170)) abline(fit) abline(h = 0, lty = 2) abline(v = 0, lty = 2) That shows us that the value 0 is far outside of the set of our observed values for Temp, which is measured in Fahrenheit. Thus, we are extrapolating the Ozone far beyond the observed data. What we can do to avoid this is to simply re-define the x-Axis, by subtracting the mean: airquality$cTemp = airquality$Temp - mean(airquality$Temp) Alternatively, you can center with the build-in R command scale airquality$cTemp = scale(airquality$Temp, center = T, scale = F) Fitting the model with the centered variable fit = lm(Ozone ~ cTemp, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ cTemp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.1576 2.2018 19.15 &lt;2e-16 *** ## cTemp 2.4287 0.2331 10.42 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 produces a more interpretable value for the intercept. We can see this also visual if we plot the results, i.e. the Ozone concentration at the mean observed temperature. plot(Ozone ~ cTemp, data = airquality) abline(fit) abline(v = 0, lty = 2) Note that the intercept of the centered variable will typically be very similar to the grand mean lm(Ozone ~ 1, data = airquality)&#39;). Furthermore, when all (centered) predictors are at their average values, the centered variables are 0. Accordingly, the intercept can be interpreted as the predicted y value when the predictors are at their average values instead of being zero. mean(airquality$Temp) # = 77.88235. ## [1] 77.88235 mean(airquality$cTemp) # = 0, regarding rounding errors. ## [1] 1.133153e-14 coef(fit) ## (Intercept) cTemp ## 42.157637 2.428703 Task Define new variables through linear transformations, meaning that you either subtract / add something to the variable, or multiply / divide the variable by a certain value. Understand how this changes the regression’s estimates. Solution fit = lm(Ozone ~ Temp, data = airquality) plot(Ozone ~ Temp, data = airquality, main = &quot;Standard&quot;) abline(fit) airquality$TempAdd = airquality$Temp + 10 fit = lm(Ozone ~ TempAdd, data = airquality) plot(Ozone ~ TempAdd, data = airquality, main = &quot;Addition + 10&quot;) abline(fit) airquality$TempAdd = airquality$Temp - 10 fit = lm(Ozone ~ TempAdd, data = airquality) plot(Ozone ~ TempAdd, data = airquality, main = &quot;Addition - 10&quot;) abline(fit) airquality$TempMult = airquality$Temp * 10 fit = lm(Ozone ~ TempMult, data = airquality) plot(Ozone ~ TempMult, data = airquality, main = &quot;Multiplication * 10&quot;) abline(fit) airquality$TempMult = airquality$Temp * 0.1 fit = lm(Ozone ~ TempMult, data = airquality) plot(Ozone ~ TempMult, data = airquality, main = &quot;Multiplication * 0.1&quot;) abline(fit) By performing simple linear transformations, you effectively only transform the x axis without doing something else. Even combinations behave the same: airquality$TempMix = airquality$Temp * 0.1 - 10 fit = lm(Ozone ~ TempMix, data = airquality) plot(Ozone ~ TempMix, data = airquality, main = &quot;Mixed&quot;) abline(fit) airquality$TempMix = airquality$Temp * 10 + 10 fit = lm(Ozone ~ TempMix, data = airquality) plot(Ozone ~ TempMix, data = airquality, main = &quot;Mixed&quot;) abline(fit) This does in general not hold for transformations dependent on \\({x}_{i}\\)! Pro Task Why do the confidence intervals (Std. Error) in the two models (centered and uncentered) differ? Do we fit different models? To get an idea, look at the standard effect plots, then run # Set the boundary and step size for x-axis, resp. x-ticks for effects plots: preList = list(cTemp = seq(-10, 110, 1)) plot(Effect(&quot;cTemp&quot;, fit, xlevels = preList)) (mind the library effects.{R}) and compare vcov(fit) (calculates variance-covariance matrix) for both models. Solution library(effects) fit1 = lm(Ozone ~ Temp, data = airquality) summary(fit1) ## ## Call: ## lm(formula = Ozone ~ Temp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -146.9955 18.2872 -8.038 9.37e-13 *** ## Temp 2.4287 0.2331 10.418 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 fit2 = lm(Ozone ~ cTemp, data = airquality) summary(fit2) ## ## Call: ## lm(formula = Ozone ~ cTemp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.1576 2.2018 19.15 &lt;2e-16 *** ## cTemp 2.4287 0.2331 10.42 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 vcov(fit1) ## (Intercept) Temp ## (Intercept) 334.420718 -4.23230774 ## Temp -4.232308 0.05435046 vcov(fit2) ## (Intercept) cTemp ## (Intercept) 4.848002921 0.000633905 ## cTemp 0.000633905 0.054350459 plot(Ozone ~ Temp, data = airquality, xlim = c(-50, 110), ylim = c(-100, 170)) abline(fit1) plot(Ozone ~ cTemp, data = airquality, xlim = c(-50, 110), ylim = c(-100, 170)) abline(fit2) preList = list(Temp = seq(-10, 110, 1)) plot(effect(&quot;Temp&quot;, fit1, xlevels = preList), main = &quot;Standard&quot;) preList = list(cTemp = seq(-10, 110, 1)) plot(effect(&quot;cTemp&quot;, fit2, xlevels = preList), main = &quot;Centered&quot;) At \\(\\bar{x}\\), the estimated function value using the ordinary least squares method (concerning an intercept that is not fixed at 0) is \\(\\bar{y}\\), so the regression line goes through \\(\\left(\\bar{x}, \\bar{y}\\right)\\) by definition. By centering the \\(x\\) values: \\(\\hat{x} = x - \\bar{x}\\), one shifts this to \\(\\left( 0, \\bar{y}\\right)\\). At \\(\\bar{x}\\), resp. centered 0, one has the most certain information about where the regression line lies. You also see, that, in the centered version, one has several data points around 0 (in the uncentered version, they are around \\(\\bar{x}\\)). Furthermore, you know the exact position of \\(\\bar{y}\\) at \\(\\bar{x}\\) resp. 0. But mind, this does not hold for the slope! Centering \\(x\\) does not change anything concerning the slope of the regression line. Though we fit different models, they inherently are the same. Mind here, that predicting new values implies shifting \\(\\hat{x}\\) back to the original position: \\(\\operatorname{f}(x) = \\hat{\\operatorname{f}}\\left( \\hat{x} + \\bar{x} \\right)\\). Thus, simply shifting data after collection does not decrease your uncertainity at any shifted position (for example shifted by \\(- \\bar{x}\\)). If you want to have this effect, you must center your data at collection, for example by defining a reasonable neutral point. The formula for the standard error of the intercept at an arbitrary position \\(\\tilde{x}\\) is: \\[\\displaystyle {\\sigma} \\sqrt{\\frac{1}{n} + \\frac{{\\left( \\tilde{x} - {\\bar{x}} \\right)}^{2}}{\\displaystyle \\sum_{i = 1}^{n}{{\\left( {x}_{i} - \\bar{x} \\right)}^{2}}}}\\] with \\(\\sigma\\) denoting the standard deviation of the residuals of the regression line and \\({x}_{i}\\) denoting the known data points for construction of the regression line. Hence, you can easily see what happens when you center your data. Furthermore, when increasing the amount (\\(n\\)) of data for calculation of the regression line, uncertainity also decreases and vice versa: # Using just half of the data: fit3 = lm(Ozone ~ Temp, data = airquality[1:(nrow(airquality)/2),]) fit4 = lm(Ozone ~ cTemp, data = airquality[1:(nrow(airquality)/2),]) vcov(fit1) # Temp, 100% data. ## (Intercept) Temp ## (Intercept) 334.420718 -4.23230774 ## Temp -4.232308 0.05435046 vcov(fit3) # Temp, 50% data. ## (Intercept) Temp ## (Intercept) 621.191349 -8.3095916 ## Temp -8.309592 0.1132031 vcov(fit2) # cTemp, 100% data. ## (Intercept) cTemp ## (Intercept) 4.848002921 0.000633905 ## cTemp 0.000633905 0.054350459 vcov(fit4) # cTemp, 50% data. ## (Intercept) cTemp ## (Intercept) 13.5020675 0.5069347 ## cTemp 0.5069347 0.1132031 preList = list(Temp = seq(-10, 110, 1)) plot(effect(&quot;Temp&quot;, fit1, xlevels = preList), main = &quot;Uncentered, 100% data&quot;) preList = list(Temp = seq(-10, 110, 1)) plot(effect(&quot;Temp&quot;, fit3, xlevels = preList), main = &quot;Uncentered, 50% data&quot;) preList = list(cTemp = seq(-10, 110, 1)) plot(effect(&quot;cTemp&quot;, fit2, xlevels = preList), main = &quot;Centered, 100% data&quot;) preList = list(cTemp = seq(-10, 110, 1)) plot(effect(&quot;cTemp&quot;, fit4, xlevels = preList), main = &quot;Centered, 50% data&quot;) Task How about multiplicative changes? Solution library(effects) airquality$mTemp10 = airquality$Temp * 10 airquality$mTemp01 = airquality$Temp * 0.1 fit5 = lm(Ozone ~ mTemp10, data = airquality) summary(fit5) ## ## Call: ## lm(formula = Ozone ~ mTemp10, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -146.99549 18.28717 -8.038 9.37e-13 *** ## mTemp10 0.24287 0.02331 10.418 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 fit6 = lm(Ozone ~ mTemp01, data = airquality) summary(fit6) ## ## Call: ## lm(formula = Ozone ~ mTemp01, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.729 -17.409 -0.587 11.306 118.271 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -146.995 18.287 -8.038 9.37e-13 *** ## mTemp01 24.287 2.331 10.418 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.71 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.4877, Adjusted R-squared: 0.4832 ## F-statistic: 108.5 on 1 and 114 DF, p-value: &lt; 2.2e-16 vcov(fit1) ## (Intercept) Temp ## (Intercept) 334.420718 -4.23230774 ## Temp -4.232308 0.05435046 vcov(fit5) ## (Intercept) mTemp10 ## (Intercept) 334.4207182 -0.4232307741 ## mTemp10 -0.4232308 0.0005435046 vcov(fit6) ## (Intercept) mTemp01 ## (Intercept) 334.42072 -42.323077 ## mTemp01 -42.32308 5.435046 preList = list(Temp = seq(-10, 1100, 1)) plot(effect(&quot;Temp&quot;, fit1, xlevels = preList), main = &quot;Standard&quot;) preList = list(mTemp10 = seq(-10, 1100, 10)) plot(effect(&quot;mTemp10&quot;, fit5, xlevels = preList), main = &quot;Multiplication * 10&quot;) preList = list(mTemp01 = seq(-10, 1100, 10)) plot(effect(&quot;mTemp01&quot;, fit6, xlevels = preList), main = &quot;Multiplication * 0.1&quot;) Looking at \\(\\displaystyle {\\sigma} \\sqrt{\\frac{1}{n} + \\frac{{\\left( \\tilde{x} - {\\bar{x}} \\right)}^{2}}{\\displaystyle \\sum_{i = 1}^{n}{{\\left( {x}_{i} - \\bar{x} \\right)}^{2}}}}\\) explains this behavior. 3.1.3 Residual Checks Now we fitted a model. But does it even fit to the data? Let’s take the slope only model lm(Ozone ~ Wind - 1, data = airquality), where we assumed that the regression line should go through (0, 0). Maybe we have good reasons to think that this should be the case biologically, but our data seem to suggest a different behavior. So, the question is: do the model assumptions lm(Ozone ~ Wind - 1) even fit to our data? With a bit of experience, you can already see with a simple prediction plot overlaid with the data that this is not the case. It seems the model systematically underpredicts Ozone for low Wind, and overpredicts for high Wind. fit = lm(Ozone ~ cTemp, data = airquality) plot(Ozone ~ cTemp, data = airquality) abline(fit) We can see this a bit nicer if we use the effects.{R} package, which we will use from now on for doing result plots for regression models. library(effects) plot(allEffects(fit, partial.residuals = T)) Here, the blue line is the fitted model (with confidence interval in light blue), purple circles are the data, and the purple line is a nonparametric fit to the data. What we see highlighted here is that the data seems to follow a completely different curve than the fitted model. The conclusion here would be: The model we are fitting does not fit to the data, we should not interpret its outputs, but rather say that we reject it, it’s the wrong model, we have to search for a more appropriate description of the data. Let’s look at the same plot for the following model: fit = lm(Ozone ~ Wind + Temp, data = airquality) plot(allEffects(fit, partial.residuals = T)) This looks already better, but there seems to be still a bit of a pattern regarding the scattering of the observed data around the regression line. We can get the difference between model and observations via residuals(fit), and we could plot them against the model predictions (which can be obtained via the predict function) via plot(residuals(fit) ~ predict(fit)) abline(h = 0) Remember: The model assumes that the data scatters with a homogenous normal distribution around the regression predictions (which is the 0 line here). What seems to happen, however, is that the scatter increases towards higher predictions, and there also seems to be a tendency towards underprediction at the high and low end. To better analyse these residuals (and potential problems), R offers a function for residual plots. It produces 4 plots. I think it’s most convenient plotting them all into one figure, via par(mfrow = c(2, 2)) which produces a figure with 2 x 2 = 4 panels. par(mfrow = c(2, 2)) plot(fit) Interpretation: Residuals vs Fitted: Shows misfits and wrong functional form. Scattering should be uniformly distributed. Normal Q-Q: Checks if residuals follow an overall normal distribution. Bullets should lie on the line in the middle of the plot and may scatter a little bit at the ends. Scale - Location: Checks for heteroskedasticity. Does the variance change with predictions/changing values? Scattering should be uniformly distributed. Residuals vs Leverage: How much impact do outliers have on the regression? Data points with high leverage should not have high residuals and vice versa. Bad points lie in the upper right or in the lower right corner. This is measured via the Cook’s distance. Distances higher than 0.5 indicate candidates for relevant outliers or strange effects. Important: Residuals are always getting better for more complex models. They should therefore NOT solely be used for model selection. Select your model structure in a different way, residual checks are just for doing a final check to see if the fitted model makes sense. Generally: If you want to do model selection, control for model complexity. The more complex the model, the higher the cost related to the increase of accuracy. Task Modify the formula to get (as far as possible) an acceptable fit to the data. Consider the following options: fit = lm(Ozone ~ Wind, data = airquality) # Intercept + slope. fit = lm(Ozone ~ 1, data = airquality) # Only intercept. fit = lm(Ozone ~ Wind - 1 , data = airquality) # Only slope. fit = lm(Ozone ~ log(Wind), data = airquality) # Predictor variables can be transformed. fit = lm(Ozone^0.5 ~ Wind, data = airquality) # Output variables can also be transformed. fit = lm(Ozone ~ Wind + I(Wind^2), data = airquality) # Mathematical functions with I() command. library(MASS) fit = lm(Ozone ~ Wind, data = airquality) # Calculates optimal transformation for Ozone^lambda to achieve residuals as normally distributed as possible. boxcox(fit) Annotation: In the picture above, you can see, that the 95% confidence interval of the best \\(\\lambda\\) lies approximately in \\([0.15, 0.5]\\). Solution fit = lm(Ozone ~ Wind + I(Wind^2), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) # Plot only 1 picture. boxcox(fit) plot(fit) Tolerable fit but still slightly poor diagnosis plots. fit = lm(Ozone^0.35 ~ Wind + I(Wind^2), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) boxcox(fit) par(mfrow = c(2, 2)) plot(fit) Slightly better fit, especially in the middle of the data. Better diagnosis plots. No perfect result, but definitely OK. Mind the few data points at the borders, especially to the right. This might explain the discrepancy between the decent fit amid the data and the worse fit at higher values. Note that now (Ozone^0.35), 1 is in the 95% confidence interval, actually near the middle of the interval. Ozone doesn’t need to be transformed more, at least according to the Box-Cox transformation. I consider this as the best fit in this solution. fit = lm(Ozone^0.35 ~ Wind + I(Wind^2) + I(Wind^3), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) boxcox(fit) par(mfrow = c(2, 2)) plot(fit) Slightly better fit to the data, but the diagnosis plots are beginning to get worse. fit = lm(Ozone^0.35 ~ Wind + I(Wind^2) + I(Wind^3) + I(Wind^4), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) boxcox(fit) par(mfrow = c(2, 2)) plot(fit) Even better fit and good diagnosis plots, bit already high model complexity and worsening leverage. fit = lm(Ozone^0.35 ~ Wind + I(Wind^2) + I(Wind^3) + I(Wind^4) + I(Wind^5), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) boxcox(fit) par(mfrow = c(2, 2)) plot(fit) As you can see, the higher the complexity of the model, the better it fits the particular data points but the less it can predict the data resp. it does not learn the underlying structure any more, but simply adopts as best as possible to the available data. This is a case of overfitting! Note the overshooting of the regression line which is a common property of higher grade polynomials. fit = lm(Ozone^0.35 ~ Wind + I(Wind^2) + I(Wind^3) + I(Wind^4) + I(Wind^5) + I(Wind^6) + I(Wind^7) + I(Wind^8), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) boxcox(fit) par(mfrow = c(2, 2)) plot(fit) Yet outliers at the border are perfectly fitted. 3.1.4 Categorical Predictors The lm() function can handle both numerical and categorical variables. To understand what happens if the predictor is categorical, we’ll use another data set here, PlantGrowth (type ?PlantGrowth or F1 help if you want details). We visualize the data via: boxplot(weight ~ group, data = PlantGrowth) A basic lm() Let’s fit an lm() now with the categorical explanatory variable group. They syntax is the same as before: fit = lm(weight ~ group, data = PlantGrowth) summary(fit) ## ## Call: ## lm(formula = weight ~ group, data = PlantGrowth) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4180 -0.0060 0.2627 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.0320 0.1971 25.527 &lt;2e-16 *** ## grouptrt1 -0.3710 0.2788 -1.331 0.1944 ## grouptrt2 0.4940 0.2788 1.772 0.0877 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6234 on 27 degrees of freedom ## Multiple R-squared: 0.2641, Adjusted R-squared: 0.2096 ## F-statistic: 4.846 on 2 and 27 DF, p-value: 0.01591 But the interpretation of the results often leads to confusion. Let’s look at the results of summary(fit). Where did the group ctrl go? The answer is there is a short, and longer answer to this. Let’s first give the short one: ctrl is the intercept, and the other predictors depict the difference between ctrl and the respective levels. So, we could say that ctrl is a kind of “reference”, encoded by the intercept, and we test for a difference of the other levels against this reference. Re-ordering the levels If you want to change which factor level is the reference, you can use: PlantGrowth$group2 = relevel(PlantGrowth$group, &quot;trt1&quot;) Now, we plot boxplot(weight ~ group2, data = PlantGrowth) We see that trt1 is the first level (you can also see this if checking levels() or str() for the factor). Let’s fit the model: fit = lm(weight ~ group2, data = PlantGrowth) And this is the result: ## ## Call: ## lm(formula = weight ~ group2, data = PlantGrowth) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4180 -0.0060 0.2627 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.6610 0.1971 23.644 &lt; 2e-16 *** ## group2ctrl 0.3710 0.2788 1.331 0.19439 ## group2trt2 0.8650 0.2788 3.103 0.00446 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6234 on 27 degrees of freedom ## Multiple R-squared: 0.2641, Adjusted R-squared: 0.2096 ## F-statistic: 4.846 on 2 and 27 DF, p-value: 0.01591 Weird, now suddenly we have a significant difference between the groups. Wasn’t the group difference not significant before? What’s the difference? The answer is that we are still fitting the totally same model, and if you would do a plot(allEffects(fit)) for the first and second model, it would look the same. However, as the p-values in the regression table always compare against the reference, we now do a comparison (ctr1 vs ctr2) that we didn’t do before, and this comparison is significant. So, if the ordering influences what levels are compared (technically, we call this contrasts, see below), how can we deal with the problem that the order influences which factors are compared. There are three answers for this: First, in many cases, the scientific question / experimental design determines which factor level should be first. In this case, the original reference was ctrl. This clearly stands for control. So, we have a special treatment here (control), and we are probably interested in the contrast between control and the treatments, but not between the different treatments. In this case, we are probably fine. ANOVA (Analysis of Variance) Second, there is a another test that is commonly performed in this case, the ANOVA. We can run this via anov = aov(fit) summary(anov) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group2 2 3.766 1.8832 4.846 0.0159 * ## Residuals 27 10.492 0.3886 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 And the result is ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group2 2 3.766 1.8832 4.846 0.0159 * ## Residuals 27 10.492 0.3886 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 To interpret this, recall that in a nutshell, the ANOVA starts with a base model (in this case intercept only) and adds the variable group. It then measures: How much the model improves in terms of \\({R}^{2}\\) (this is in the column Sum Sq). If this increase of model fit is significant. In this case, we can conclude that the variable group (3 levels) significantly improves model fit, i.e. the group seems to have an overall effect, even though the individual contrasts in the original model where not significant. Post-Hoc Tests Third, if there is no clear reference level, and the ANOVA confirms that the factor has an effect, we may want to compute p-values for all possible combinations of factor levels. This is done via the so-called post-hoc tests: TukeyHSD(anov) The result is: ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = fit) ## ## $group2 ## diff lwr upr p adj ## ctrl-trt1 0.371 -0.3202161 1.062216 0.3908711 ## trt2-trt1 0.865 0.1737839 1.556216 0.0120064 ## trt2-ctrl 0.494 -0.1972161 1.185216 0.1979960 This highlights, as before, a significant difference between trt1 and trt2. It is common to visualize the results of the post-hoc tests with the so-called Compact Letter Display (cld). This doesn’t work with the base TukeyHSD function, so we will use the multcomp.{R} pacakge: library(multcomp) fit = lm(weight ~ group, data = PlantGrowth) tuk = glht(fit, linfct = mcp(group = &quot;Tukey&quot;)) summary(tuk) # Standard display. ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: lm(formula = weight ~ group, data = PlantGrowth) ## ## Linear Hypotheses: ## Estimate Std. Error t value Pr(&gt;|t|) ## trt1 - ctrl == 0 -0.3710 0.2788 -1.331 0.391 ## trt2 - ctrl == 0 0.4940 0.2788 1.772 0.198 ## trt2 - trt1 == 0 0.8650 0.2788 3.103 0.012 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) tuk.cld = cld(tuk) # Letter-based display. plot(tuk.cld) The cld gives a new letter for each group of factor levels that are statistically undistinguishable. You can see the output via tuk.cld, here I only show the plot: Task: Categorical analysis for the airquality data set The airquality data set contains a categorical predictor “month”, which, however, is wrongly coded as a numeric value. We can correct this by doing airquality$fMonth = factor(airquality$Month) Execute this code and fit a regression for fMonth! Solution Advanced topic: Changing the contrasts Before, I said that there is a long and short answer to the interpretation of the regression coefficients. Now here is the long answer: Iif you have a categorical predictor with &gt; 2 levels, there are several ways to set up the model to fit those levels. Maybe the easiest idea would be to fit a mean per level. You can actually tell R to do this via fit = lm(weight ~ 0 + group, data = PlantGrowth) If we look at the output, we see that now we simply get the mean of each group (level): ## ## Call: ## lm(formula = weight ~ 0 + group, data = PlantGrowth) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4180 -0.0060 0.2627 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## groupctrl 5.0320 0.1971 25.53 &lt;2e-16 *** ## grouptrt1 4.6610 0.1971 23.64 &lt;2e-16 *** ## grouptrt2 5.5260 0.1971 28.03 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6234 on 27 degrees of freedom ## Multiple R-squared: 0.9867, Adjusted R-squared: 0.9852 ## F-statistic: 665.5 on 3 and 27 DF, p-value: &lt; 2.2e-16 Why does R not do that by default? Because now, we see the comparison of each group against zero in the p-values. In some cases, this can be interesting, but in most cases where we have a control and treatment and are interested in the difference between treatment and control, this is not informative. Therefore, R uses the so-called treatment contrasts, which is what we had before. There are actually a number of further options for specifying contrasts. You can tell R by hand how the levels should be compared or use some of the pre-defined contrasts. Here is an example: PlantGrowth$group3 = PlantGrowth$group contrasts(PlantGrowth$group3) = contr.helmert fit = lm(weight ~ group3, data = PlantGrowth) summary(fit) ## ## Call: ## lm(formula = weight ~ group3, data = PlantGrowth) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4180 -0.0060 0.2627 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.07300 0.11381 44.573 &lt; 2e-16 *** ## group31 -0.18550 0.13939 -1.331 0.19439 ## group32 0.22650 0.08048 2.814 0.00901 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6234 on 27 degrees of freedom ## Multiple R-squared: 0.2641, Adjusted R-squared: 0.2096 ## F-statistic: 4.846 on 2 and 27 DF, p-value: 0.01591 What we are using here is Helmert contrasts, which contrast the second level with the first, the third with the average of the first two, and so on. Which contrasts make most sense depends on the question. For more details, see here: https://besjournals.onlinelibrary.wiley.com/doi/epdf/10.1111/j.2041-210X.2010.00012.x. 3.1.5 Exercise: Global Plant Trait Analysis Look at the analysis of plant height data here. In this example, the authors perform a simple linear regression to answer the question whether height of plant species from around the world depends on temperature at the location of occurrence. Note that “loght” = log(height). Plant_height = read.csv(file =&quot;https://www.dropbox.com/s/zgf1j59mho66z74/Plant_height.csv?dl=1&quot;) model = lm(loght ~ temp, data = Plant_height) The model suggests a significant global trend of plant height increasing with temperature: ## ## Call: ## lm(formula = loght ~ temp, data = Plant_height) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.97903 -0.42804 -0.00918 0.43200 1.79893 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.225665 0.103776 -2.175 0.031 * ## temp 0.042414 0.005593 7.583 1.87e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6848 on 176 degrees of freedom ## Multiple R-squared: 0.2463, Adjusted R-squared: 0.242 ## F-statistic: 57.5 on 1 and 176 DF, p-value: 1.868e-12 Tasks Perform residual checks and modify the model if you think it is necessary. Does the effect still hold? A concern regarding this analysis is that species are not fully independent. E.g., the plant family of Ericaceae, comprising many tiny dwarf shrubs, could have evolved in colder regions by chance. Is the signal still there if we look at families, rather than species? For that, try fitting the regression for the mean per family. Hint: you could use the aggregate() function to get means per family. The data set also includes a categorical variable “growthform”. Test if growthform has an effect on the plant height. Solution 1. 2. 3. 3.2 Multiple Regression Multiple (linear) regression means that we consider more than 1 predictor in the same model. The syntax is very easy: Just add your predictors (numerical or categorical) to your regression formula, as in fit = lm(Ozone ~ Wind + Temp, data = airquality) The estimates for the regression will appear as before in the regression table: ## ## Call: ## lm(formula = Ozone ~ Wind + Temp, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -41.251 -13.695 -2.856 11.390 100.367 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -71.0332 23.5780 -3.013 0.0032 ** ## Wind -3.0555 0.6633 -4.607 1.08e-05 *** ## Temp 1.8402 0.2500 7.362 3.15e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 21.85 on 113 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.5687, Adjusted R-squared: 0.5611 ## F-statistic: 74.5 on 2 and 113 DF, p-value: &lt; 2.2e-16 And we can visualize the results as before via: library(effects) plot(allEffects(fit, partial.residuals = T)) However, there are a few complications when adding multiple predictors, which we will cover in this chapter. 3.2.1 Getting Started To get started with the multiple regression, let’s just use a bunch of predictor variables in the airquality data set. I created a new variable fMonth to have month as a factor (categorical): airquality$fMonth = factor(airquality$Month) fit = lm(Ozone ~ Temp + Wind + Solar.R + fMonth, data = airquality) The resulting regression table looks already a bit intimidating: ## ## Call: ## lm(formula = Ozone ~ Temp + Wind + Solar.R + fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.344 -13.495 -3.165 10.399 92.689 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -74.23481 26.10184 -2.844 0.00537 ** ## Temp 1.87511 0.34073 5.503 2.74e-07 *** ## Wind -3.10872 0.66009 -4.710 7.78e-06 *** ## Solar.R 0.05222 0.02367 2.206 0.02957 * ## fMonth6 -14.75895 9.12269 -1.618 0.10876 ## fMonth7 -8.74861 7.82906 -1.117 0.26640 ## fMonth8 -4.19654 8.14693 -0.515 0.60758 ## fMonth9 -15.96728 6.65561 -2.399 0.01823 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.72 on 103 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.6369, Adjusted R-squared: 0.6122 ## F-statistic: 25.81 on 7 and 103 DF, p-value: &lt; 2.2e-16 But luckily we have the effect plots to make sense of this: plot(allEffects(fit)) Multiple regression != A lot of univariate regressions A common misunderstanding is that the above regression simply amounts to 4 independent univariate regressions. Let’s look at the model fit = lm(Ozone ~ Wind , data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Wind, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -51.572 -18.854 -4.868 15.234 90.000 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 96.8729 7.2387 13.38 &lt; 2e-16 *** ## Wind -5.5509 0.6904 -8.04 9.27e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 26.47 on 114 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.3619, Adjusted R-squared: 0.3563 ## F-statistic: 64.64 on 1 and 114 DF, p-value: 9.272e-13 The estimated effect is - 5.55, while in the multiple regression, we had -3.1. What’s going on? The reason is that Wind and Temp are correlated (the technical term is collinear). You can see this by running plot(Wind ~ Temp, data = airquality) This means that if we take Temp out of the model, Wind will absorb a part of the effect of Temp, or, to put it differently: If we include Temp in the model, the model will fit the effect of Wind after removing the effect that can be explained by Temp, and vice versa. Task Try out different combinations of predictors and observe how the estimates change. Try to find the predictor combination for which the effect of Wind on Temp is maximal. Solution So, which effect is the correct one, the univariate or the multivariate model? We will speak about the rules when to put variables in and out of the regression later, in the chapter on model choice. For the moment, however, note that if two variables correlate, including or removing one will change the estimate for the other. Remember: If there is collinearity, including one variable changes the effect size for other variables! 3.2.2 Simulating the Effect of Collinearity We can understand this problem in more detail if we simulate some data. Let’s create 2 positively collinear predictors: x1 = runif(100, -5, 5) x2 = x1 + 0.2*runif(100, -5, 5) We can check whether this has worked, through visual inspection as well as by calculating the correlation coefficient: plot(x1, x2) cor(x1, x2) ## [1] 0.9823957 The first case I want to look at, is when effect1 and effect2 have equal sign. Let’s create such a situation, by simulating a normal response \\(y\\), where the intercept is 0, and both predictors have effect = 1: y = 0 + 1*x1 + 1*x2 + rnorm(100) In this case, univariate models have too high effect sizes, because in conjunction, 1) positive correlation between predictors and 2) equal effect direction can lead to predictors absorbing each other’s effect if one is taken out: coef(lm(y ~ x1)) ## (Intercept) x1 ## 0.1223649 2.0490812 coef(lm(y ~ x2)) ## (Intercept) x2 ## -0.1093031 1.9838618 You can also see this visually: par(mfrow = c(1, 2)) plot(x1, y, main = &quot;x1 effect&quot;, ylim = c(-12, 12)) abline(lm(y ~ x1)) # Draw a line with intercept 0 and slope 1, # just like we simulated the true dependency of y on x1: abline(0, 1, col = &quot;red&quot;) legend(&quot;topleft&quot;, c(&quot;fitted&quot;, &quot;true&quot;), lwd = 1, col = c(&quot;black&quot;, &quot;red&quot;)) plot(x2, y, main = &quot;x2 effect&quot;, ylim = c(-12, 12)) abline(lm(y ~ x2)) abline(0, 1, col = &quot;red&quot;) legend(&quot;topleft&quot;, c(&quot;fitted&quot;, &quot;true&quot;), lwd = 1, col = c(&quot;black&quot;, &quot;red&quot;)) The multivariate model, on the other hand, is fine: coef(lm(y~x1 + x2)) ## (Intercept) x1 x2 ## 0.04269288 1.33989604 0.70264737 plot(effects::allEffects(lm(y ~ x1 + x2)), ylim = c(-12, 12)) Task Check what happens if the 2 effects have opposite sign. Solution x1 = runif(100, -5, 5) x2 = -x1 + 0.2*runif(100, -5, 5) y = 0 + 1*x1 + 1*x2 + rnorm(100) cor(x1, x2) ## [1] -0.9797563 coef(lm(y ~ x1)) ## (Intercept) x1 ## -0.21750989 0.03526607 coef(lm(y ~ x2)) ## (Intercept) x2 ## -0.2111353836 0.0008128962 par(mfrow = c(1, 2)) plot(x1, y, main = &quot;x1 effect&quot;, ylim = c(-12, 12)) abline(lm(y ~ x1)) abline(0, 1, col = &quot;red&quot;) legend(&quot;topleft&quot;, c(&quot;fitted&quot;, &quot;true&quot;), lwd = 1, col = c(&quot;black&quot;, &quot;red&quot;)) plot(x2, y, main = &quot;x2 effect&quot;, ylim = c(-12, 12)) abline(lm(y ~ x2)) abline(0, 1, col = &quot;red&quot;) legend(&quot;topleft&quot;, c(&quot;fitted&quot;, &quot;true&quot;), lwd = 1, col = c(&quot;black&quot;, &quot;red&quot;)) coef(lm(y~x1 + x2)) ## (Intercept) x1 x2 ## -0.2164637 0.8995268 0.8951650 plot(effects::allEffects(lm(y ~ x1 + x2)), ylim = c(-12, 12)) Both effects cancel out. 3.2.3 Scaling Variables Before, we had already computed the regression table for a regression with 4 predictors: airquality$fMonth = factor(airquality$Month) fit = lm(Ozone ~ Temp + Wind + Solar.R + fMonth, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Temp + Wind + Solar.R + fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.344 -13.495 -3.165 10.399 92.689 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -74.23481 26.10184 -2.844 0.00537 ** ## Temp 1.87511 0.34073 5.503 2.74e-07 *** ## Wind -3.10872 0.66009 -4.710 7.78e-06 *** ## Solar.R 0.05222 0.02367 2.206 0.02957 * ## fMonth6 -14.75895 9.12269 -1.618 0.10876 ## fMonth7 -8.74861 7.82906 -1.117 0.26640 ## fMonth8 -4.19654 8.14693 -0.515 0.60758 ## fMonth9 -15.96728 6.65561 -2.399 0.01823 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.72 on 103 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.6369, Adjusted R-squared: 0.6122 ## F-statistic: 25.81 on 7 and 103 DF, p-value: &lt; 2.2e-16 So, which of the predictors is the strongest (= most effect on the response)? Superficially, it looks as if Month has the highest values. But that does mean that Month is the most important? No, and the reason is that we have to remember the effect on the response \\(y = \\text{regression estimate} * \\text{predictor}\\), i.e if we have a predictor with a large range (difference between min/max values), it may have a strong effect even though the estimate is small. So, we cannot compare the effect sizes directly. A small trick that is therefore often applied is to divide all numeric predictors by their standard deviation to bring them all on the same range, which will then be roughly between -2, 2. You can do this by hand, or use the scale() function in R: airquality$sTemp = scale(airquality$Temp, center = F) airquality$sTemp = airquality$Temp / sd(airquality$Temp) # Identical. We do the same for the other numeric variables and run the regression: airquality$sWind = scale(airquality$Wind, center = F) airquality$sSolar.R = scale(airquality$Solar.R, center = F) fit = lm(Ozone ~ sTemp + sWind + sSolar.R + fMonth, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ sTemp + sWind + sSolar.R + fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.344 -13.495 -3.165 10.399 92.689 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -74.235 26.102 -2.844 0.00537 ** ## sTemp 17.748 3.225 5.503 2.74e-07 *** ## sWind -32.931 6.992 -4.710 7.78e-06 *** ## sSolar.R 10.819 4.903 2.206 0.02957 * ## fMonth6 -14.759 9.123 -1.618 0.10876 ## fMonth7 -8.749 7.829 -1.117 0.26640 ## fMonth8 -4.197 8.147 -0.515 0.60758 ## fMonth9 -15.967 6.656 -2.399 0.01823 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.72 on 103 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.6369, Adjusted R-squared: 0.6122 ## F-statistic: 25.81 on 7 and 103 DF, p-value: &lt; 2.2e-16 We can compare the effect sizes directly, which suggests that Temp is actually the most important predictor. Note: In the code above, I used scale(..., center = F). By default, the scale function will scale and center. As discussed before, centering is nearly always useful as it improves the interpretability of the intercept, so we should have actually better run the defaults: airquality$sTemp = scale(airquality$Temp) airquality$sWind = scale(airquality$Wind) airquality$sSolar.R = scale(airquality$Solar.R) fit = lm(Ozone ~ sTemp + sWind + sSolar.R + fMonth, data = airquality) Which results in the following regression table: ## ## Call: ## lm(formula = Ozone ~ sTemp + sWind + sSolar.R + fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.344 -13.495 -3.165 10.399 92.689 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 50.558 5.526 9.150 5.74e-15 *** ## sTemp 17.748 3.225 5.503 2.74e-07 *** ## sWind -10.952 2.325 -4.710 7.78e-06 *** ## sSolar.R 4.703 2.131 2.206 0.0296 * ## fMonth6 -14.759 9.123 -1.618 0.1088 ## fMonth7 -8.749 7.829 -1.117 0.2664 ## fMonth8 -4.197 8.147 -0.515 0.6076 ## fMonth9 -15.967 6.656 -2.399 0.0182 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.72 on 103 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.6369, Adjusted R-squared: 0.6122 ## F-statistic: 25.81 on 7 and 103 DF, p-value: &lt; 2.2e-16 Note that all estimates are identical, except for the intercept, which is now the estimate for the mean value of all numeric predictors (and with standard contrasts for the reference value of the categorical predictors). Tasks Compare centered / uncentered models visually, using the effects.{R} package. Are any of the predictions different, i.e. would you conclude something different using the different options? Discuss: If we get a different data set with a smaller standard deviation for e.g. Wind, the effect estimate would change. You can check this by just dividing the scaled variable by 0.5. Is this a problem? Discuss: Under which circumstances should you center / scale, and how should you discuss the estimated coefficients in a paper? Solution 1. 2. 3. 3.2.4 ANOVA for Multiple Regression Another option to see which variable is more important is variance partitioning, aka ANOVA. In an ANOVA, we add variable by variable to the model, and see how much the fit to the data (expressed by residual sum of squares) improves. We can do this via fit = lm(Ozone ~ Wind + Temp, data = airquality) summary(aov(fit)) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Wind 1 45284 45284 94.81 &lt; 2e-16 *** ## Temp 1 25886 25886 54.20 3.15e-11 *** ## Residuals 113 53973 478 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## 37 observations deleted due to missingness So, why has Wind the larger effect, again? Didn’t we just say that Temp has a larger effect? Is there something wrong with our ANOVA? The problem with the aov function is that it performs a so-called type I ANOVA. The type I ANOVA adds variables in the order in which they are in the model formula. If I specify another formula, the result is different: fit = lm(Ozone ~ Temp + Wind, data = airquality) summary(aov(fit)) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Temp 1 61033 61033 127.78 &lt; 2e-16 *** ## Wind 1 10137 10137 21.22 1.08e-05 *** ## Residuals 113 53973 478 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## 37 observations deleted due to missingness The difference is due to the collinearity of the variables. Because Temp and Wind are collinear, the variable that is added first to the model will absorb variation from the other, and thus seems to explain more of the response. There are other types of ANOVA that avoid this problem. The so-called type II ANOVA shows for each variable only the part that is uniquely attributable to the respective variable car::Anova(fit, type = &quot;II&quot;) ## Anova Table (Type II tests) ## ## Response: Ozone ## Sum Sq Df F value Pr(&gt;F) ## Temp 25886 1 54.196 3.149e-11 *** ## Wind 10137 1 21.223 1.080e-05 *** ## Residuals 53973 113 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 There is also type III, which is as type II, but avoids a similar problem for interactions (see next subchapter). This is probably the most conservative setting: car::Anova(fit, type = &quot;III&quot;) ## Anova Table (Type III tests) ## ## Response: Ozone ## Sum Sq Df F value Pr(&gt;F) ## (Intercept) 4335 1 9.0763 0.003196 ** ## Temp 25886 1 54.1960 3.149e-11 *** ## Wind 10137 1 21.2230 1.080e-05 *** ## Residuals 53973 113 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Here is an overview of the situation for 2 predictors A and B and their interaction. The upper left figure corresponds to the case where we have no collinearity between either of those variables. The figure on the top right (and similarly types I - III) are the three possible types of ANOVA for variables with collinearity. The “overlap” between the circles depicts the shared part, i.e. the variability that can be expressed by either variable (due to collinearity). Note that the shares in Type II, III do not add up to 1, as there is a kind of “dark variation” that we cannot securely add to either variable. Task Try out the difference between type I, II, III ANOVA for the airquality data set, either for the simple Wind + Temp model, or for more complicated models. If you want to see the effects of Type III Anova, you need to add an interaction (see next section). Solution 3.2.5 Interactions When we have multiple variables, we can have the situation that the value of one variable influences the effect of the other(s). Technically, this is called in interaction. In situations where the causal direction is known, this is also called a moderator. An example: Imagine we observe that the effect of aspirin differs depending on the weight of the subject. Technically, we have an interaction between aspirin and weight. Physiologically, we know the causal direction is “weight -&gt; effect of aspirin”, so we can say weight is a moderator for the effect of aspirin. fit = lm(Ozone ~ Temp * Wind, data = airquality) plot(allEffects(fit)) We will have a look at the summary later, but for the moment, let’s just look at the output visually. In the effect plots, we see the effect of Temperature on Ozone for different values of Wind. We also see that the slope changes. For low Wind, we have a strong effect of Temperature. For high Wind, the effect is basically gone. Let’s look at the interaction syntax in more detail. The “*” operator in an lm().{R} is a shorthand for main effects + interactions. You can write equivalently: fit = lm(Ozone ~ Wind + Temp + Wind:Temp, data = airquality) What is fit here is literally a third predictor that is specified as Wind * Temp (normal multiplication). The above syntax would allow you to also have interactions without main effects, e.g.: fit = lm(Ozone ~ Wind + Wind:Temp, data = airquality) Although this is generally never advisable, as the main effect influences the interaction, unless you are sure that the main effect must be zero. There is another important syntax in R: fit = lm(Ozone ~ (Wind + Temp + Solar.R)^2 , data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ (Wind + Temp + Solar.R)^2, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -38.685 -11.727 -2.169 7.360 91.244 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.408e+02 6.419e+01 -2.193 0.03056 * ## Wind 1.055e+01 4.290e+00 2.460 0.01555 * ## Temp 2.322e+00 8.330e-01 2.788 0.00631 ** ## Solar.R -2.260e-01 2.107e-01 -1.073 0.28591 ## Wind:Temp -1.613e-01 5.896e-02 -2.735 0.00733 ** ## Wind:Solar.R -7.231e-03 6.688e-03 -1.081 0.28212 ## Temp:Solar.R 5.061e-03 2.445e-03 2.070 0.04089 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 19.17 on 104 degrees of freedom ## (42 observations deleted due to missingness) ## Multiple R-squared: 0.6863, Adjusted R-squared: 0.6682 ## F-statistic: 37.93 on 6 and 104 DF, p-value: &lt; 2.2e-16 plot(allEffects(fit), selection = 1) plot(allEffects(fit), selection = 2) plot(allEffects(fit), selection = 3) This creates all main effect and second order (aka two-way) interactions between variables. You can also use ^3 to create all possible 2-way and 3-way interactions between the variables in the parentheses. By the way: The ()^2 syntax for interactions is the reason why we have to write I(x^2) if we want to write a quadratic effect in an lm. Categorical variables When you include an interaction with a categorical variable, that means a separate effect will be fit for each level of the categorical variable, as in fit = lm(Ozone ~ Wind * fMonth, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ Wind * fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -54.528 -12.562 -2.246 10.691 77.750 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 50.748 15.748 3.223 0.00169 ** ## Wind -2.368 1.316 -1.799 0.07484 . ## fMonth6 -41.793 31.148 -1.342 0.18253 ## fMonth7 68.296 20.995 3.253 0.00153 ** ## fMonth8 82.211 20.314 4.047 9.88e-05 *** ## fMonth9 23.439 20.663 1.134 0.25919 ## Wind:fMonth6 4.051 2.490 1.627 0.10680 ## Wind:fMonth7 -4.663 2.026 -2.302 0.02329 * ## Wind:fMonth8 -6.154 1.923 -3.201 0.00181 ** ## Wind:fMonth9 -1.874 1.820 -1.029 0.30569 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.12 on 106 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.5473, Adjusted R-squared: 0.5089 ## F-statistic: 14.24 on 9 and 106 DF, p-value: 7.879e-15 The interpretation is like for a single categorical predictor, i.e. we see the effect of Wind as the effect for the first Month 5, and the Wind:fMonth6 effect, for example, tests for a difference in the Wind effect between month 5 (reference) and month 6. As before, you could change this behavior by changing contrasts. Interactions and centering A super important topic when working with numeric interactions is centering. Task Compare the estimates for Wind / Temp for the following models Ozone ~ Wind Ozone ~ Temp Ozone ~ Wind + Temp Ozone ~ Wind * Temp How do you explain the differences in the estimates for the main effects of Wind and Temp? What do you think corresponds most closely to the “true” effect of Wind and Temp? Maybe you know the answer already. If not, consider the following simulation, where we create data with known effect sizes: # Create predictor variables. x1 = runif(100, -1, 1) x2 = runif(100, -1, 1) # Create response for lm, all effects are 1. y = x1 + x2 + x1*x2 + rnorm(100, sd = 0.3) # Fit model, but shift the mean of the predictor. fit = lm(y ~ x1 * I(x2 + 5)) summary(fit) ## ## Call: ## lm(formula = y ~ x1 * I(x2 + 5)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.82652 -0.20877 0.00984 0.20251 0.87495 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -5.01327 0.28118 -17.829 &lt; 2e-16 *** ## x1 -4.20433 0.49065 -8.569 1.75e-13 *** ## I(x2 + 5) 1.00200 0.05555 18.037 &lt; 2e-16 *** ## x1:I(x2 + 5) 1.03698 0.09623 10.776 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.2894 on 96 degrees of freedom ## Multiple R-squared: 0.9179, Adjusted R-squared: 0.9154 ## F-statistic: 357.9 on 3 and 96 DF, p-value: &lt; 2.2e-16 plot(allEffects(fit)) Play around with the shift in x2, and observe how the effects change. Try how the estimates change when centering the variables via the scale() command. If you understand what’s going on, you will realize that you should always center your variables, whenever you use any interactions. Excellent explanations of the issues also in the attached paper https://besjournals.onlinelibrary.wiley.com/doi/epdf/10.1111/j.2041-210X.2010.00012.x. Solution 3.2.6 Exercise: Global Plant Trait Analysis #2 Task Revisit exercise 3.1.5, and test If temp or NPP (net primary productivity) is a more important predictor. If growth forms (variable growthform) differ in their temperature effects. If the effect of temp remains significant if we include latitude and an interaction of latitude with temp. If not, why? Plot temp ~ lat. Ask me to comment on case 3! Solution 3.3 Model Choice and Causal Inference What we saw so far is that there is a large number of models we could fit. But how do we decide which is the “right” one? A basic requirement is that the residuals should more or less fit. It is seldom sensible to use a model that does not fit to the data. Beyond that, however, there is a range of options which is sensible, depending on the purpose of the model. In stats, we distinguish at least 2 basic purposes: Prediction: If our purpose is to build a predictive model, we are searching for the model that makes the smallest possible error on a new data sample. (Causal) inference: When we are speaking about inference, that means we are interested in the estimated effects and we would like them to be identical to the “true” causal effects. There is a further subdivision with regards to prior knowledge: In an exploratory analysis, we have only a vague idea what we are looking for. We might just be scanning the data set for possible (causal) relationships. In a confirmatory analysis, we have a clear target for the analysis, and ideally a plan for which model we want to fit, prior to seeing the data. Depending on the analysis goal, different methods are appropriate, and we will talk about those in this chapter. The most common goal for scientific papers is a confirmatory causal analysis (even though the actual practice does not always follow this). Even within each of these objectives, there are a number of additional criteria that may influence which method and model one will choose for the analysis. For example, Either for predictions or for estimators, do I care more about a small error, or about bias? (Error = typical (mean) difference between estimator and truth; Bias = systematic difference between estimator and truth) Do I want confidence intervals to be correct (coverage), and calibrated p-values? Do we have experimental data, where all predictors are known, measured, and randomized / orthogonal, or do we have observational data, where we do not have controlled predictors, and collinearity / confounding is the norm. All of these play into the choice of model and model selection method. Some methods, for example, produce smaller errors on the estimators, but a larger bias. In this chapter, I will provide you with a rough overview about the methods. We will talk about them in more detail in the next days. Discussion Discuss with your partners: How do you typically choose which regression formula to fit? 3.3.1 The Bias-Variance Trade-off One fundamental idea about modelling choice is the bias-variance trade-off, which applies regardless of whether we are interested in causal effects (next section) or predictions. The idea is the following: The more variables / complexity we include in the model, the better it can (in principle) adjust to the true relationship, thus reducing model error from bias. The more variables / complexity we include in the model, the larger our error (variance) on the fitted coefficients, thus increasing model error from variance. This means, the model adopts to the given data but no longer to the underlying relationship. If we sum both terms up, we see that at the total error of a model that is too simple will be dominated by bias (underfitting), and the total error of a model that is too complex will be dominated by variance (overfitting): We will do some practical simulations on this on Wednesday, for the moment let’s just accept this idea as a fact. 3.3.2 Causal Inference Apart from the bias-variance trade-off, a crucial consideration is if we are just interested in predictions, or in causal effects. If we are after causal effects, the correct selection of variables is crucial, while it isn’t if we just want to predict. This is reviewed in the excellent paper by Lederer et al., which is available here. The basic idea is the following: Let’s first define what we mean by “causality”: Assume we look at the effect of a target variable (something that could be manipulated = predictor) on another variable (the outcome = response) in the presence of other (non-target) variables. The goal of a causal analysis is to control for these other variables, in such a way that we estimate the same effect size we would obtain if only the target predictor was manipulated (as in a randomized controlled trial). You probably have learned in your intro stats class that, to do so, we have to control for confounders. I am less sure, however, if everyone is clear about what a confounder is. In particular, confounding is more specific than having a variable that correlates with predictor and response. The direction is crucial to identify true confounders. For example, C) in the figure below shows a collider, i.e. a variable that is influenced by predictor and response. Although it correlates with predictor and response, correcting for it (or including it) in a multiple regression will create a collider bias on the causal link we are interested in (Corollary: Including all variables is not always a good thing). The bottom line of this discussions (and the essence of Pearl 2000, 2009) is that to establish causality for a specific link, we have to close the so-called back-door paths for this link. So, the strategy for fitting a causal effect is: Start by writing down the hypothesis / structure that you want to estimate causally (for example, in A, B “Plant diversity” -&gt; Ecosystem productivity). Then, include / exclude other variables with the goal of: Controlling for confounders (back-doors, blue paths in the figure). Not controlling for colliders, (something similar, called “M-Bias”,) and other similar relationships (red paths). It depends on the question whether we should control for mediators (yellow paths). Note: These other variables (if included) are just there to correct our estimates (-&gt; called nuisance parameters), and we should later not discuss them, as they were not themselves checked for confounding (Table 2 fallacy). Case study 1 Take the example of the past exercise (airquality) and assume, the goal is to understand the causal effect of Temperature on Ozone (primary hypothesis). Draw a causal diagram to decide which variables to take into the regression (i.e. noting which are confounders, mediators or colliders), and fit the model. Solution Case study 2 Perform a causal, a predictive and an exploratory analysis of the Swiss fertility data set called “swiss”, available in the standard R data sets. Target for the causal analysis is to estimate the causal (separate direct and indirect effects) of education on fertility, i.e. lm(Fertility ~ Education, data = swiss). Solution 3.3.3 Model Selection Methods Regardless of whether we do a causal, exploratory or a predictive analysis, we sometimes may still want to get some aid in deciding on the model structure. Specifically: For a predictive analysis, even if we know the true causal structure, it may be better to fit a simpler model to reduce the bias-variance trade-off. For a causal analysis, we may not be sure about certain relationships, and we may want to test if a particular hypothesis is better supported by the data than another, or we may be data-limited as well, which means we have to reduce complexity. In these situations, model selection methods may help. The key for using them is to understand that neither of them can do magic. If you have a limited data set and a massive number of predictors, they will not magically produce the correct model. However, they can be useful in certain situations. Let’s introduce them first. I discuss possible problems in the next chapter. Likelihood-ratio tests A likelihood-ratio test (LRT) is a hypothesis test that can be used to compare 2 nested models. Nested means that the simpler of the 2 models is included in the more complex model. The more complex model will always fit the data better, i.e. have a higher likelihood. This is the reason why you shouldn’t use fit or residual patterns for model selection. The likelihood-ratio test tests whether this improvement in likelihood is significantly larger than one would expect if the simpler model is the correct model. Likelihood-ratio tests are used to get the p-values in an R ANOVA, and thus you can also use the anova function to perform an likelihood-ratio test between 2 models (Note: For simple models, this will run an F-test, which is technically not exactly a likelihood-ratio test, but the principle is the same): # Model 1 m1 = lm(Ozone ~ Wind , data = airquality) # Model 2 m2 = lm(Ozone ~ Wind + Temp, data = airquality) # LRT anova(m1, m2) ## Analysis of Variance Table ## ## Model 1: Ozone ~ Wind ## Model 2: Ozone ~ Wind + Temp ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 114 79859 ## 2 113 53973 1 25886 54.196 3.149e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 AIC model selection Another method for model selection, and probably the most widely used, also because it does not require that models are nested, is the AIC = Akaike Information Criterion. The AIC is defined as \\(2 \\ln(\\text{likelihood}) + 2k\\), where \\(k\\) = number of parameters. Essentially, this means AIC = Fit - Penalty for complexity. Lower AIC is better! m1 = lm(Ozone ~ Temp, data = airquality) m2 = lm(Ozone ~ Temp + Wind, data = airquality) AIC(m1) ## [1] 1067.706 AIC(m2) ## [1] 1049.741 Note 1: It can be shown that AIC is asymptotically identical to leave-one-out cross-validation, so what AIC is optimizing is essentially the predictive error of the model on new data. Note 2: There are other information criteria, such as BIC, DIC, WAIC etc., as well as sample-size corrected versions of either of them (e.g. AICc). The difference between the methods is beyond the scope of this course. For the most common one (BIC), just the note that this penalizes more strongly for large data sets, and thus corrects a tendency of AIC to overfit for large data sets. Task Compare results of AIC with likelihood-ratio tests. Discuss: When to use one or the other? Solution Shrinkage estimation A third option option for model selection are shrinkage estimators. These include the LASSO and ridge. The basic idea behind these estimators is not to reduce the number of parameters, but to reduce the flexibility of the model by introducing a penalty on the regression coefficients that code a preference for smaller or zero coefficient values. Effectively, this can either amount to model selection (because some coefficients are shrunk directly to zero), or it can mean that we can fit very large models while still being able to do good predictions, or avoid overfitting. To put a ridge penalty on the standard lm, we can use lm.ridge(Ozone ~ Wind + Temp + Solar.R, data = airquality, lambda = 2) ## Wind Temp Solar.R ## -62.73376169 -3.30622990 1.62842247 0.05961015 We can see how the regression estimates vary for different penalties via plot( lm.ridge( Ozone ~ Wind + Temp + Solar.R, data = airquality, lambda = seq(0, 200, 0.1) ) ) 3.3.4 P-hacking The most dubious model selection strategy, actually considered scientific misconduct, is p-hacking. The purpose of this exercises is to show you how not to do model selection, i.e, that by playing around with the variables, you can make any outcome significant. That is why your hypothesis needs to be fixed before looking at the data, ideally through pre-registration, based on an experimental plan or a causal analysis. Here is the example: Measurements of plant performance. Target was to find out if Gen1 has an effect on Performance. Various other variables are measured set.seed(1) dat = data.frame(matrix(rnorm(300), ncol = 10)) colnames(dat) = c(&quot;Performance&quot;, &quot;Gen1&quot;, &quot;Gen2&quot;, &quot;soilC&quot;, &quot;soilP&quot;, &quot;Temp&quot;, &quot;Humidity&quot;, &quot;xPos&quot;, &quot;yPos&quot;, &quot;Water&quot;) summary(dat) ## Performance Gen1 Gen2 soilC ## Min. :-2.21470 Min. :-1.37706 Min. :-1.8050 Min. :-1.2766 ## 1st Qu.:-0.43496 1st Qu.:-0.38752 1st Qu.:-0.5373 1st Qu.:-0.5656 ## Median : 0.25658 Median :-0.05656 Median : 0.1138 Median :-0.1924 ## Mean : 0.08246 Mean : 0.13277 Mean : 0.1103 Mean : 0.1133 ## 3rd Qu.: 0.70870 3rd Qu.: 0.66515 3rd Qu.: 0.5643 3rd Qu.: 0.7126 ## Max. : 1.59528 Max. : 1.98040 Max. : 2.4016 Max. : 1.7673 ## soilP Temp Humidity xPos ## Min. :-1.914359 Min. :-1.48746 Min. :-2.28524 Min. :-2.8889 ## 1st Qu.:-0.733529 1st Qu.:-0.33002 1st Qu.:-0.75750 1st Qu.:-0.8995 ## Median :-0.312623 Median : 0.04362 Median : 0.10326 Median :-0.1313 ## Mean :-0.330028 Mean : 0.23700 Mean : 0.06683 Mean :-0.2380 ## 3rd Qu.: 0.003638 3rd Qu.: 0.97163 3rd Qu.: 0.63563 3rd Qu.: 0.3813 ## Max. : 2.087166 Max. : 2.30798 Max. : 2.49766 Max. : 1.8031 ## yPos Water ## Min. :-2.40310 Min. :-2.2891 ## 1st Qu.:-0.41395 1st Qu.:-0.5373 ## Median : 0.03328 Median : 0.2001 ## Mean : 0.02441 Mean : 0.1368 ## 3rd Qu.: 0.70437 3rd Qu.: 0.8813 ## Max. : 1.71963 Max. : 2.6492 # As you see, no effect of Gen1. summary(lm(Performance ~ ., data = dat)) ## ## Call: ## lm(formula = Performance ~ ., data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.1014 -0.2262 0.1023 0.5836 1.0351 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.01744 0.19941 0.087 0.931 ## Gen1 -0.02324 0.29154 -0.080 0.937 ## Gen2 -0.02607 0.23874 -0.109 0.914 ## soilC 0.04102 0.25354 0.162 0.873 ## soilP -0.07209 0.24970 -0.289 0.776 ## Temp -0.23499 0.19354 -1.214 0.239 ## Humidity -0.04075 0.21180 -0.192 0.849 ## xPos -0.33340 0.20491 -1.627 0.119 ## yPos 0.15390 0.21238 0.725 0.477 ## Water 0.13047 0.24852 0.525 0.605 ## ## Residual standard error: 0.9503 on 20 degrees of freedom ## Multiple R-squared: 0.2707, Adjusted R-squared: -0.05751 ## F-statistic: 0.8248 on 9 and 20 DF, p-value: 0.6012 Task Task for you: P-hack the analysis, i.e. make an effect appear, by trying around (systematically, e.g. with selecting with data, model selection, or by hand to find a model combination that has an effect). The group who finds the model with the highest significance for Gen1 wins! Example summary(lm(Performance ~ Gen1 * Humidity, data = dat[20:30,])) ## ## Call: ## lm(formula = Performance ~ Gen1 * Humidity, data = dat[20:30, ## ]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.71665 -0.39627 -0.05915 0.28044 0.91257 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.5248 0.2277 -2.304 0.05465 . ## Gen1 0.8657 0.2276 3.804 0.00668 ** ## Humidity 0.6738 0.2544 2.649 0.03298 * ## Gen1:Humidity -0.5480 0.1756 -3.122 0.01680 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6102 on 7 degrees of freedom ## Multiple R-squared: 0.7004, Adjusted R-squared: 0.572 ## F-statistic: 5.454 on 3 and 7 DF, p-value: 0.03 Here some inspiration: Hack Your Way To Scientific Glory: https://projects.fivethirtyeight.com/p-hacking/ False-Positive Psychology: Undisclosed Flexibility in Data Collection and Analysis Allows Presenting Anything as Significant: https://journals.sagepub.com/doi/full/10.1177/0956797611417632 Sixty seconds on … P-hacking: https://sci-hub.tw/https://www.bmj.com/content/362/bmj.k4039 John Oliver about p-hacking: 3.3.5 Problems of Stepwise Model Selection LRT or AIC model selections are often used stepwise or global, i.e. we run either a chain of model selections (AIC or LRT), adding or removing complexity, or we run immediately all possible models and compare their AIC. Options in R for automatic model selection using AIC are the StepAIC function MuMIn.{R} package Here is an example for either of those: library(MASS) library(MuMIn) fit = lm(Ozone ~ . , data = airquality) stepAIC(fit) ## Start: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + mTemp10 + mTemp01 + fMonth + sTemp + ## sWind + sSolar.R ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + mTemp10 + mTemp01 + fMonth + sTemp + ## sWind ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + mTemp10 + mTemp01 + fMonth + sTemp ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + mTemp10 + mTemp01 + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + mTemp10 + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + TempMix + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## TempMult + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + TempAdd + ## fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + cTemp + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Month + Day + fMonth ## ## ## Step: AIC=681.55 ## Ozone ~ Solar.R + Wind + Temp + Day + fMonth ## ## Df Sum of Sq RSS AIC ## - Day 1 429.5 44231 680.63 ## &lt;none&gt; 43801 681.55 ## - fMonth 4 3636.8 47438 682.40 ## - Solar.R 1 2101.6 45903 684.75 ## - Wind 1 9552.6 53354 701.44 ## - Temp 1 13410.1 57212 709.19 ## ## Step: AIC=680.63 ## Ozone ~ Solar.R + Wind + Temp + fMonth ## ## Df Sum of Sq RSS AIC ## &lt;none&gt; 44231 680.63 ## - fMonth 4 3771.8 48003 681.71 ## - Solar.R 1 2090.7 46322 683.76 ## - Wind 1 9524.7 53756 700.28 ## - Temp 1 13005.6 57237 707.24 ## ## Call: ## lm(formula = Ozone ~ Solar.R + Wind + Temp + fMonth, data = airquality) ## ## Coefficients: ## (Intercept) Solar.R Wind Temp fMonth6 fMonth7 ## -74.23481 0.05222 -3.10872 1.87511 -14.75895 -8.74861 ## fMonth8 fMonth9 ## -4.19654 -15.96728 # Default na.action for regressions in R is that NA lines are removed. # MuMIn requires that there are no NA in the data in the first place. # We have to change the default and remove the NA in the data. options(na.action = &quot;na.fail&quot;) dat = airquality[complete.cases(airquality),] fit = lm(Ozone ~ . , data = dat) out = dredge(fit) ## Fixed term is &quot;(Intercept)&quot; # Set back to default NA action. options(na.action = &quot;na.omit&quot;) # Plot only first 6 and last 6 elements of the (realy) long list: head(out) ## Global model call: lm(formula = Ozone ~ ., data = dat) ## --- ## Model selection table ## (Int) cTm Mnt mT0 mT1 Slr.R sWn df logLik AICc delta ## 586 54.63 1.871 -2.992 0.0496 -11.68 6 -492.356 997.5 0 ## 601 -91.08 -2.992 18.71 0.0496 -11.68 6 -492.356 997.5 0 ## 602 54.63 1.871 -2.992 0.0496 -11.68 6 -492.356 997.5 0 ## 617 -91.08 -2.992 0.1871 0.0496 -11.68 6 -492.356 997.5 0 ## 618 54.63 1.871 -2.992 0.0496 -11.68 6 -492.356 997.5 0 ## 633 -91.08 -2.992 18.71 0.0496 -11.68 6 -492.356 997.5 0 ## weight ## 586 0.167 ## 601 0.167 ## 602 0.167 ## 617 0.167 ## 618 0.167 ## 633 0.167 ## Models ranked by AICc(x) tail(out) ## Global model call: lm(formula = Ozone ~ ., data = dat) ## --- ## Model selection table ## (Int) Day Mnt Slr.R sSl.R df logLik AICc delta weight ## 131 41.33 0.05724 11.48 4 -538.843 1086.1 88.54 0.496 ## 195 17.63 0.05724 0.1275 4 -538.843 1086.1 88.54 0.496 ## 9 18.81 3.227 3 -544.892 1096.0 98.49 0.003 ## 1 42.10 2 -546.037 1096.2 98.66 0.003 ## 11 19.06 -0.01492 3.226 4 -544.891 1098.2 100.64 0.001 ## 3 42.42 -0.01983 3 -546.035 1098.3 100.77 0.001 ## Models ranked by AICc(x) Task Discuss with your group: What are the problems with model selection? Concentrate on two points in particular: Causal structure. Validity of p-values / multiple testing. For the latter, see example below. library(MASS) set.seed(1) dat = data.frame(matrix(runif(20000), ncol = 100)) dat$y = rnorm(200) fullModel = lm(y ~ . , data = dat) # Number of predictors + intercept: length(fullModel$coefficients) ## [1] 101 # Number of significant predictors: length(summary(fullModel)[[4]][,4][summary(fullModel)[[4]][,4] &lt;= 0.05]) ## [1] 2 2 predictors out of 100are significant (on average, we expect 5 of 100 to be significant). summary(selection) ## ## Call: ## lm(formula = y ~ X1 + X2 + X3 + X5 + X7 + X13 + X20 + X23 + X30 + ## X37 + X42 + X45 + X46 + X47 + X48 + X64 + X65 + X66 + X71 + ## X75 + X80 + X81 + X87 + X88 + X89 + X90 + X94 + X100, data = dat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.04660 -0.50885 0.05722 0.49612 1.53704 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.0314 0.5045 2.044 0.04244 * ## X1 0.4728 0.2185 2.164 0.03187 * ## X2 -0.3809 0.2012 -1.893 0.06008 . ## X3 0.3954 0.1973 2.004 0.04668 * ## X5 -0.2742 0.1861 -1.473 0.14251 ## X7 -0.4442 0.1945 -2.284 0.02359 * ## X13 0.4396 0.1980 2.220 0.02775 * ## X20 0.3984 0.1918 2.078 0.03924 * ## X23 -0.4137 0.2081 -1.988 0.04836 * ## X30 -0.3750 0.1991 -1.884 0.06125 . ## X37 0.4006 0.1989 2.015 0.04550 * ## X42 -0.3934 0.2021 -1.946 0.05325 . ## X45 -0.3197 0.2063 -1.550 0.12296 ## X46 0.3673 0.1992 1.844 0.06690 . ## X47 -0.4240 0.2029 -2.090 0.03811 * ## X48 0.5130 0.1937 2.649 0.00884 ** ## X64 -0.3676 0.2094 -1.755 0.08102 . ## X65 -0.2887 0.1975 -1.462 0.14561 ## X66 0.2769 0.2107 1.315 0.19039 ## X71 -0.5301 0.2003 -2.646 0.00891 ** ## X75 0.5020 0.1969 2.550 0.01165 * ## X80 0.3722 0.2058 1.809 0.07224 . ## X81 -0.3731 0.2176 -1.715 0.08820 . ## X87 -0.2684 0.1958 -1.371 0.17225 ## X88 -0.4524 0.2069 -2.187 0.03011 * ## X89 -0.4123 0.2060 -2.002 0.04691 * ## X90 -0.3528 0.2067 -1.707 0.08971 . ## X94 0.3813 0.2049 1.861 0.06440 . ## X100 -0.4058 0.2024 -2.005 0.04653 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.76 on 171 degrees of freedom ## Multiple R-squared: 0.3177, Adjusted R-squared: 0.2059 ## F-statistic: 2.843 on 28 and 171 DF, p-value: 1.799e-05 # Number of predictors + intercept: length(selection$coefficients) ## [1] 29 # Number of significant predictors: length(summary(selection)[[4]][,4][summary(selection)[[4]][,4] &lt;= 0.05]) ## [1] 15 Voila, 15 out of 28 (before 100) predictors significant. Looks like we could have good fun to discuss / publish these results! Solution Conclusion: Stepwise selection + regression table is hidden multiple testing and has inflated Type I error rates! This is well-known in the stats literature. You CAN do hypothesis tests after model selection, but those require corrections and are not particularly popular, because they are even less significant than the full regression. That being said, those methods work excellent to generate predictive models! 3.3.6 Exercise: Global Plant Trait Analysis #3 Task Revisit exercises 3.1.5 / 3.2.6, and discuss / analyze: Which would be the appropriate model, if we want to get a predictive model for plant height, based on the variables in the data set? Which would be the appropriate model, if we want to fit the causal effect of temp on height? Consider all variables in the data set! Solution "],["heteroskedasticity.html", "4 Heteroskedasticity and Grouped Data (Random Effects) 4.1 Warm-up Exercise 4.2 General Modelling Strategy for lm() + Correction of Residuals 4.3 Random and Mixed Effects - Motivation", " 4 Heteroskedasticity and Grouped Data (Random Effects) In this chapter, we check lm() and change the functional for our variance terms to improve the model. 4.1 Warm-up Exercise The following data set contains information about life satisfaction in Germany, based on the socio-economic panel. satisf = read.csv(file = &quot;https://www.dropbox.com/s/sggy9b9xb0rekkx/soep_satisfcation.csv?dl=1&quot;) Task Perform an exploratory causal analysis of the data to find out what determines life satisfaction and if the effect of those factors has changed over time. Solution 4.2 General Modelling Strategy for lm() + Correction of Residuals With all the discussion about causality, model selection etc., we can re-visit the question of how to build an appropriate lm(). My basic modelling strategy for a causal lm() analysis is the following: First, think about the problem and your question an decide on a base structure. Ideally, you do this by: Writing down your scientific questions (e.g. Ozone ~ Wind) Then add confounders if needed. Remember to make a difference between variables controlled for confounding, and other confounders (which are typically not controlled for confounding). We may have to use some model selection, but in fact with a good analysis plan this is rarely necessary for a causal analysis. Then, we have to check if the model fits all right. Yesterday, we already discussed about residual checks and we discussed that the 4 standard residual plots check for 4 different problems: Residuals vs Fitted = Functional relationship. Normal Q-Q = Normality of residuals. Scale - Location = Variance homogeneity. Residuals vs Leverage = Should we worry about certain outliers? fit = lm(Ozone ~ Temp , data = airquality) plot(Ozone ~ Temp, data = airquality) abline(fit) par(mfrow = c(2, 2)) plot(fit) It is usually recommended to solve the problems of the plots in that order, i.e.: First worry about the functional relationship. Then about the distribution, variance and outliers. Today’s topic will mostly be about plot 3, the variance modelling. Before we come to that, however, a few more hints about how to deal with plots 1 and 2 (see the following sections). 4.2.1 Wrong Functional Form What do we do if we have the wrong functional form in the Scale - Location plot? Here a few strategies that you might want to consider: The easiest strategy is to add complexity to the polynomial, e.g. quadratic terms, interactions etc. library(effects) fit = lm(Ozone ~ Wind * Temp + I(Wind^2) + I(Temp^2), data = airquality) plot(allEffects(fit, partial.residuals = T), selection = 1) plot(allEffects(fit, partial.residuals = T), selection = 2) plot(allEffects(fit, partial.residuals = T), selection = 3) and see if the residuals are getting better. To avoid doing this totally randomly, it may be useful to plot residuals against individual predictors by hand! GAMs Another options are GAMs = Generalized Additive Models. The idea is to fit a smooth function to data, to automatically find the “right” functional form. The smoothness of the function is automatically optimized. library(mgcv) fit = gam(Ozone ~ s(Wind) + s(Temp) + s(Solar.R) , data = airquality) summary(fit) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Ozone ~ s(Wind) + s(Temp) + s(Solar.R) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.099 1.663 25.32 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(Wind) 2.910 3.657 13.695 &lt; 2e-16 *** ## s(Temp) 3.833 4.753 11.613 &lt; 2e-16 *** ## s(Solar.R) 2.760 3.447 3.967 0.00858 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.723 Deviance explained = 74.7% ## GCV = 338.9 Scale est. = 306.83 n = 111 # allEffects doesn&#39;t work here. plot(fit, pages = 0, residuals = T, pch = 20, lwd = 1.8, cex = 0.7, col = c(&quot;black&quot;, rep(&quot;red&quot;, length(fit$residuals)))) AIC(fit) ## [1] 962.596 Comparison to normal lm(): fit = lm(Ozone ~ Wind + Temp + Solar.R , data = airquality) AIC(fit) ## [1] 998.7171 Spline interaction is called a tensor spline: fit = gam(Ozone ~ te(Wind, Temp) + s(Solar.R) , data = airquality) summary(fit) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Ozone ~ te(Wind, Temp) + s(Solar.R) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42.099 1.403 30 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## te(Wind,Temp) 13.176 14.87 22.151 &lt;2e-16 *** ## s(Solar.R) 2.822 3.52 3.177 0.0237 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.803 Deviance explained = 83.1% ## GCV = 258.06 Scale est. = 218.54 n = 111 plot(fit, pages = 0, residuals = T, pch = 20, lwd = 1.9, cex = 0.4) AIC(fit) ## [1] 930.5047 GAMs are particularly useful for confounders. If you have confounders, you usually don’t care that the fitted relationship is a bit hard to interpret, you just want the confounder effect to be removed. So, if you want to fit the causal relationship between Ozone ~ Wind, account for the other variables, a good strategy might be: fit = gam(Ozone ~ Wind + s(Temp) + s(Solar.R) , data = airquality) summary(fit) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Ozone ~ Wind + s(Temp) + s(Solar.R) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 72.2181 6.3166 11.433 &lt; 2e-16 *** ## Wind -3.0302 0.6082 -4.982 2.55e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(Temp) 3.358 4.184 14.972 &lt;2e-16 *** ## s(Solar.R) 2.843 3.551 3.721 0.0115 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.664 Deviance explained = 68.6% ## GCV = 402.11 Scale est. = 372.4 n = 111 In this way, you still get a nicely interpretable linear effect for Wind, but you don’t have to worry about the functional form of the other predictors. 4.2.2 Modelling Variance Terms After we have fixed the functional form, we want to look at the distribution of the residuals. We said yesterday that you can try to get them more normal by applying an appropriate transformation, e.g. the logarithm or square root. Without transformation, we often find that data shows heteroskedasticity, i.e. the residual variance changes with some predictor or the mean estimate (see also Scale - Location plot). Maybe your experimental data looks like this: set.seed(125) data = data.frame(treatment = factor(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 15))) data$observation = c(7, 2 ,4)[as.numeric(data$treatment)] + rnorm( length(data$treatment), sd = as.numeric(data$treatment)^2 ) boxplot(observation ~ treatment, data = data) Especially p-values and confidence intervals of lm() and ANOVA can react quite strongly to such differences in residual variation. So, running a standard lm() / ANOVA on this data is not a good idea - in this case, we see that all regression effects are not significant, as is the ANOVA, suggesting that there is no difference between groups. fit = lm(observation ~ treatment, data = data) summary(fit) ## ## Call: ## lm(formula = observation ~ treatment, data = data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -17.2897 -1.0514 0.3531 2.4465 19.8602 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.043 1.731 4.069 0.000204 *** ## treatmentB -3.925 2.448 -1.603 0.116338 ## treatmentC -1.302 2.448 -0.532 0.597601 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6.704 on 42 degrees of freedom ## Multiple R-squared: 0.05973, Adjusted R-squared: 0.01495 ## F-statistic: 1.334 on 2 and 42 DF, p-value: 0.2744 summary(aov(fit)) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## treatment 2 119.9 59.95 1.334 0.274 ## Residuals 42 1887.6 44.94 So, what can we do? Option 1: Find a transformation of the response - If heteroskedasticity correlates with the mean value, one can typically decrease it by some sqrt or log transformation, but often difficult, because this may also conflict with keeping the distribution normal. Option 2: Model the variance - Modelling the variance to fit a model where the variance is not fixed. The basic option in R is nlme::gls. GLS = Generalized Least Squares. In this function, you can specify a dependency of the residual variance on a predictor or the response. See options via ?varFunc. In our case, we will use the varIdent option, which allows to specify a different variance per treatment. library(nlme) fit = gls(observation ~ treatment, data = data, weights = varIdent(form = ~ 1 | treatment)) summary(fit) ## Generalized least squares fit by REML ## Model: observation ~ treatment ## Data: data ## AIC BIC logLik ## 243.9258 254.3519 -115.9629 ## ## Variance function: ## Structure: Different standard deviations per stratum ## Formula: ~1 | treatment ## Parameter estimates: ## A B C ## 1.000000 4.714512 11.821868 ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 7.042667 0.2348387 29.989388 0.0000 ## treatmentB -3.925011 1.1317816 -3.467994 0.0012 ## treatmentC -1.302030 2.7861462 -0.467323 0.6427 ## ## Correlation: ## (Intr) trtmnB ## treatmentB -0.207 ## treatmentC -0.084 0.017 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -2.4587934 -0.6241702 0.1687727 0.6524558 1.9480169 ## ## Residual standard error: 0.9095262 ## Degrees of freedom: 45 total; 42 residual If you check the ANOVA, also the ANOVA is significant! anova(fit) ## Denom. DF: 42 ## numDF F-value p-value ## (Intercept) 1 899.3761 &lt;.0001 ## treatment 2 6.0962 0.0047 The second option for modeling variances is to use the glmmTMB.{R} package, which we will use quite frequently this week. Here, you can specify an extra regression formula for the dispersion (= residual variance). If we fit this: library(glmmTMB) fit = glmmTMB(observation ~ treatment, data = data, dispformula = ~ treatment) We get 2 regression tables as outputs - one for the effects, and one for the dispersion (= residual variance). We see, as expected, that the dispersion is higher in groups B and C compared to A. An advantage over gls is that we get confidence intervals and p-values for these differences on top! summary(fit) ## Family: gaussian ( identity ) ## Formula: observation ~ treatment ## Dispersion: ~treatment ## Data: data ## ## AIC BIC logLik deviance df.resid ## 248.7 259.5 -118.3 236.7 39 ## ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 7.0427 0.2269 31.042 &lt; 2e-16 *** ## treatmentB -3.9250 1.0934 -3.590 0.000331 *** ## treatmentC -1.3020 2.6917 -0.484 0.628582 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Dispersion model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.2587 0.3651 -0.708 0.479 ## treatmentB 3.1013 0.5164 6.006 1.91e-09 *** ## treatmentC 4.9399 0.5164 9.566 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 4.2.3 Exercise Take this plot of Ozone ~ Solar.R using the airquality data. Clearly there is heteroskedasticity in the relationship: plot(Ozone ~ Solar.R, data = airquality) We can also see this when we fit the regression model: m1 = lm(Ozone ~ Solar.R, data = airquality) par(mfrow = c(2, 2)) plot(m1) Task We could of course consider other predictors, but let’s say we want to fit this model specifically Try to get the variance stable with a transformation. Use the gls function with the untransformed response to make the variance dependent on Solar.R. Hint: Read in corClasses.{R} and decide how to model this. Use glmmTMB.{R} to model heteroskedasticity. Solution 4.2.4 Non-normality and Outliers What can we do if, after accounting for the functional relationship, response transformation and variance modelling, residual diagnostic 2 shows non-normality, in particular strong outliers? Here simulated example data with strong outliers / deviations from normality: set.seed(123) n = 100 concentration = runif(n, -1, 1) growth = 2 * concentration + rnorm(n, sd = 0.5) + rbinom(n, 1, 0.05) * rnorm(n, mean = 6*concentration, sd = 6) plot(growth ~ concentration) Fitting the model, we see that the distribution is to wide: fit = lm(growth ~ concentration) par(mfrow = c(2, 2)) plot(fit) What can we do to deal with such distributional problems and outliers? Removing - Bad option, hard to defend, reviewers don’t like this - if at all, better show robustness with and without outlier, but result is sometimes not robust. Change the distribution - Fit a model with a different distribution, i.e. GLM or other. -&gt; We will do this on Wednesday. Robust regressions. Quantile regression - A special type of regression that does not assume a particular residual distribution. Change distribution If we want to change the distribution, we have to go to a GLM, see Wednesday. Robust regression Robust methods generally refer to methods that are robust to violation of assumptions, e.g. outliers. More specifically, standard robust regressions typically downweight datap oints that have a too high influence on the fit. See https://cran.r-project.org/web/views/Robust.html for a list of robust packages in R. # This is the classic method. library(MASS) fit = rlm(growth ~ concentration) summary(fit) ## ## Call: rlm(formula = growth ~ concentration) ## Residuals: ## Min 1Q Median 3Q Max ## -7.1986 -0.3724 0.0377 0.3391 7.0902 ## ## Coefficients: ## Value Std. Error t value ## (Intercept) -0.0978 0.0594 -1.6453 ## concentration 2.0724 0.1048 19.7721 ## ## Residual standard error: 0.534 on 98 degrees of freedom # No p-values and not sure if we can trust the confidence intervals. # Would need to boostrap by hand! # This is another option that gives us p-values directly. library(robustbase) ## Warning: package &#39;robustbase&#39; was built under R version 4.1.1 ## ## Attaching package: &#39;robustbase&#39; ## The following object is masked from &#39;package:survival&#39;: ## ## heart fit = lmrob(growth ~ concentration) summary(fit) ## ## Call: ## lmrob(formula = growth ~ concentration) ## \\--&gt; method = &quot;MM&quot; ## Residuals: ## Min 1Q Median 3Q Max ## -7.2877 -0.4311 -0.0654 0.2788 7.0384 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.04448 0.05160 -0.862 0.391 ## concentration 2.00588 0.08731 22.974 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Robust residual standard error: 0.5549 ## Multiple R-squared: 0.8431, Adjusted R-squared: 0.8415 ## Convergence in 7 IRWLS iterations ## ## Robustness weights: ## 9 observations c(27,40,47,52,56,76,80,91,100) ## are outliers with |weight| = 0 ( &lt; 0.001); ## 5 weights are ~= 1. The remaining 86 ones are summarized as ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.6673 0.9015 0.9703 0.9318 0.9914 0.9989 ## Algorithmic parameters: ## tuning.chi bb tuning.psi refine.tol ## 1.548e+00 5.000e-01 4.685e+00 1.000e-07 ## rel.tol scale.tol solve.tol eps.outlier ## 1.000e-07 1.000e-10 1.000e-07 1.000e-03 ## eps.x warn.limit.reject warn.limit.meanrw ## 1.819e-12 5.000e-01 5.000e-01 ## nResample max.it best.r.s k.fast.s k.max ## 500 50 2 1 200 ## maxit.scale trace.lev mts compute.rd fast.s.large.n ## 200 0 1000 0 2000 ## psi subsampling cov ## &quot;bisquare&quot; &quot;nonsingular&quot; &quot;.vcov.avar1&quot; ## compute.outlier.stats ## &quot;SM&quot; ## seed : int(0) Quantile regression Quantile regressions don’t fit a line with an error spreading around it, but try to fit a quantile (e.g. the 0.5 quantile, the median) regardless of the distribution. Thus, they work even if the usual assumptions don’t hold. library(quantreg) fit = rq(growth ~ concentration, .5) summary(fit) ## ## Call: rq(formula = growth ~ concentration, tau = 0.5) ## ## tau: [1] 0.5 ## ## Coefficients: ## coefficients lower bd upper bd ## (Intercept) -0.06011 -0.17742 0.02280 ## concentration 2.06802 1.87514 2.23110 summary(fit, se = &quot;boot&quot;) ## ## Call: rq(formula = growth ~ concentration, tau = 0.5) ## ## tau: [1] 0.5 ## ## Coefficients: ## Value Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.06011 0.07352 -0.81757 0.41559 ## concentration 2.06802 0.10989 18.81864 0.00000 Alternative and very useful quantreg.{R} package: https://cran.r-project.org/web/packages/lqmm/index.html Summary Actions on real outliers: Robust regression. Remove Actions on different distributions: Transform. Change distribution or quantile regression. 4.3 Random and Mixed Effects - Motivation Random effects are a very common addition to regression models that can be used for any type of grouping (categorical) variable. Lets look at the Month in airquality: airquality$fMonth = as.factor(airquality$Month) Let’s say further that we are only interested in calculating the mean of Ozone: fit = lm(Ozone ~ 1, data = airquality) Problem: If we fit residuals, we see that they are correlated in Month, so we somehow have to account for Month: plot(residuals(fit) ~ airquality$fMonth[as.numeric(row.names(model.frame(fit)))]) A fixed effect model for fMonth would be fit = lm(Ozone ~ fMonth, data = airquality) summary(fit) ## ## Call: ## lm(formula = Ozone ~ fMonth, data = airquality) ## ## Residuals: ## Min 1Q Median 3Q Max ## -52.115 -16.823 -7.282 13.125 108.038 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 23.615 5.759 4.101 7.87e-05 *** ## fMonth6 5.829 11.356 0.513 0.609 ## fMonth7 35.500 8.144 4.359 2.93e-05 *** ## fMonth8 36.346 8.144 4.463 1.95e-05 *** ## fMonth9 7.833 7.931 0.988 0.325 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 29.36 on 111 degrees of freedom ## (37 observations deleted due to missingness) ## Multiple R-squared: 0.2352, Adjusted R-squared: 0.2077 ## F-statistic: 8.536 on 4 and 111 DF, p-value: 4.827e-06 However, using a fixed effect costs a lot of degrees of freedom, and maybe we are not really interested in Month, we just want to correct the correlation in the residuals. Solution: Mixed / random effect models. In a mixed model, we assume (differently to a fixed effect model) that the effect of Month is coming from a normal distribution. In a way, you could say that there are two types of errors: The random effect, which is a normal “error” per group (in this case Month). And the residual error, which comes on top of the random effect. Because of this hierarchical structure, these models are also called “multi-level models” or “hierarchical models”. Nomenclature: No random effect = Fixed effect model. Only random effects + intercept = Random effect model. Random effects + fixed effects = Mixed model. Because grouping naturally occurs in any type of experimental data (batches, blocks, etc.), mixed effect models are the de-facto default for most experimental data! Mind, that grouping even occurs for example, when 2 different persons gather information. 4.3.1 Fitting Random Effects Models To speak about random effects, we will use an example data set containing exam scores of 4,059 students from 65 schools in Inner London. This data set is located in the R package mlmRev.{R}. Response: “normexam” (Normalized exam score). Predictor 1: “standLRT” (Standardised LR test score; Reading test taken when they were 11 years old). Predictor 2: “sex” of the student (F / M). If we analyze this with a simple lm, we get the following response: library(mlmRev) library(effects) mod0 = lm(normexam ~ standLRT + sex , data = Exam) plot(allEffects(mod0)) Random intercept model A random intercept model assumes that each school gets their own intercept. It’s pretty much identical to the fixed effect model lm(normexam ~ standLRT + sex + school), except that instead of giving each school a separate independent intercept, we assume that the school effects come from a common normal distribution. mod1 = lmer(normexam ~ standLRT + sex + (1 | school), data = Exam) summary(mod1) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: normexam ~ standLRT + sex + (1 | school) ## Data: Exam ## ## REML criterion at convergence: 9346.6 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.7120 -0.6314 0.0166 0.6855 3.2735 ## ## Random effects: ## Groups Name Variance Std.Dev. ## school (Intercept) 0.08986 0.2998 ## Residual 0.56252 0.7500 ## Number of obs: 4059, groups: school, 65 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 0.07639 0.04202 1.818 ## standLRT 0.55947 0.01245 44.930 ## sexM -0.17136 0.03279 -5.226 ## ## Correlation of Fixed Effects: ## (Intr) stnLRT ## standLRT -0.013 ## sexM -0.337 0.061 If we look at the outputs, we see that the effects of school are not explicitly mentioned, i.e. we fit an average over the schools. This is also because we treat the random effects as error rather than as estimates. However, the school mean effects are estimated, and we can make them visible, e.g. via: with(Exam, { randcoef = ranef(mod1)$school[,1] fixedcoef = fixef(mod1) plot(standLRT, normexam) for(i in 1:65){ abline(a = fixedcoef[1] + randcoef[i], b = fixedcoef[2], col = i) } }) Random slope model A random slope model assumes that each school also gets their own slope for a given parameter (per default we will always estimate slope and intercept, but you could overwrite this, not recommended!). Let’s do this for standLRT (you could of course do both as well). mod2 = lmer(normexam ~ standLRT + sex + (standLRT | school), data = Exam) summary(mod2) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: normexam ~ standLRT + sex + (standLRT | school) ## Data: Exam ## ## REML criterion at convergence: 9303.2 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.8339 -0.6373 0.0245 0.6819 3.4500 ## ## Random effects: ## Groups Name Variance Std.Dev. Corr ## school (Intercept) 0.08795 0.2966 ## standLRT 0.01514 0.1230 0.53 ## Residual 0.55019 0.7417 ## Number of obs: 4059, groups: school, 65 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 0.06389 0.04167 1.533 ## standLRT 0.55275 0.02016 27.420 ## sexM -0.17576 0.03228 -5.445 ## ## Correlation of Fixed Effects: ## (Intr) stnLRT ## standLRT 0.356 ## sexM -0.334 0.036 Fitting a random slope on standLRT is pretty much identical to fit the fixed effect model lm(normexam ~ standLRT*school + sex), except that school is a random effect, and therefore parameter estimates for the interaction sex:school are not independent. The results is similar to the random intercept model, except that we have an additional variance term. Here a visualization of the results with(Exam, { randcoefI = ranef(mod2)$school[,1] randcoefS = ranef(mod2)$school[,2] fixedcoef = fixef(mod2) plot(standLRT, normexam) for(i in 1:65){ abline(a = fixedcoef[1] + randcoefI[i] , b = fixedcoef[2] + randcoefS[i], col = i) } }) Syntax cheat sheet: Random intercept: `(1 | group). ONLY random slope for a given fixed effect: (0 + fixedEffect | group). Random slope + intercept + correlation (default): (fixedEffect | group). Random slope + intercept without correlation: (fixedEffect || group), identical to (1 | group) + (0 + fixedEffect | group). Nested random effects: (1 | group / subgroup). If groups are labeled A, B, C, … and subgroups 1, 2, 3, …, this will create labels A1, A2 ,B1, B2, so that you effectively group in subgroups. Useful for the many experimental people that do not label subgroups uniquely, but otherwise no statistical difference to a normal random effect. Crossed random effects: You can add random effects independently, as in (1 | group1) + (1 | group2). 4.3.2 Case Study 1: College Student Performance Over Time Background and data structure The GPA (college grade point average) data is a longitudinal data set, where 200 college students and their GPA have been followed 6 consecutive semesters. Look at the GPA (download) data set, retrieved from https://m-clark.github.io/mixed-models-with-R/. # Loading data in RData format will attach objects, here &quot;gpa&quot;, in the same environment. load(&quot;gpa.RData&quot;) str(gpa) In this data set, there are GPA measures on 6 consecutive occasions, with a job status variable (how many hours worked) for the same 6 occasions. There are two student-level explanatory variables: The sex (1 = male, 2 = female) and the high school gpa. There is also a dichotomous student-level outcome variable, which indicates whether a student has been admitted to the university of their choice. Since not every student applies to a university, this variable has many missing values. Each student and each year of observation have an id. Task Analyze if GPA improves over time (occasion)! Hint: The amount and trend of GPA from one student are not independent. Do a standard linear regression and a mixed effects regression, including random intercept and slope for the grouping variable student. Compare the confidence intervals (Hint: ?confint) and the coefficients (?coef) of the standard linear model and the mixed effects model. Look at the random effects estimates of the mixed effects model (hint: ?ranef). Advanced / optional: Look at a visualziation of the random slopes at: https://m-clark.github.io/mixed-models-with-R/random_slopes.html#visualization-of-effects. Execute and understand the generative simulation of random slopes at: https://m-clark.github.io/mixed-models-with-R/random_slopes.html#exercises-for-random-slopes. Solution 4.3.3 Problems With Mixed Models Specifying mixed models is quite simple, however, there is a large list of (partly quite complicate) issues in their practical application. Here, a (incomplete) list: Interpretation of random effects What do the random effects mean? The classical interpretation is that they are a structured error, so they are basically group residuals and are not of further importance. However, people increasingly see random effects also as a means to fit effects that could otherwise not be fittet. For example, if we have data for common and rare species, and we are interested in the density dependence of the species, we could fit mortality ~ density + (density | species) In such a model, we have the mean density effect across all species, and rare species with few data will be constrained by this effect, while common species with a lot of data can overrule the normal distribution imposed by the random slope and get their own estimate. In this picture, the random effect imposes an adaptive shrinkage, similar to a LASSO or ridge shrinkage estimator, with the shrinkage strength controlled by the standard deviation of the random effect. Degrees of freedom for a random effect The second problem is: How many parameters does a random effect model have? To know how many parameters the model hss is crucial for calculating p-values, AIC and all that. We can estimate roughly how many parameters we should have by looking at the fixed effect version of the models: mod1 = lm(normexam ~ standLRT + sex , data = Exam) mod1$rank # 3 parameters. ## [1] 3 mod2 = lmer(normexam ~ standLRT + sex + (1 | school), data = Exam) # No idea how many parameters. mod3 = lm(normexam ~ standLRT + sex + school, data = Exam) mod3$rank # 67 parameters. ## [1] 67 What we can say is that the mixed model is more complicated than mod1, but less than mod2 (as it has the additional constraint), so the complexity must be somewhere in-between. But now much? In fact, the complexity is controlled by the estimated variance of the random effect. For a high variance, the model is nearly as complex as mod3, for a low variance, it is only as complex as mod1. Because of these issues, lmer by default does not return p-values. However, you can calculate p-values based on approximate degrees of freedom via the lmerTest package, which also corrects ANOVA for random effects, but not AIC. library(lmerTest) m2 = lmer(normexam ~ standLRT + sex + (1 | school), data = Exam, REML = F) summary(m2) ## Linear mixed model fit by maximum likelihood . t-tests use Satterthwaite&#39;s ## method [lmerModLmerTest] ## Formula: normexam ~ standLRT + sex + (1 | school) ## Data: Exam ## ## AIC BIC logLik deviance df.resid ## 9340.0 9371.6 -4665.0 9330.0 4054 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.7117 -0.6326 0.0168 0.6865 3.2744 ## ## Random effects: ## Groups Name Variance Std.Dev. ## school (Intercept) 0.08807 0.2968 ## Residual 0.56226 0.7498 ## Number of obs: 4059, groups: school, 65 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.07646 0.04168 76.66670 1.834 0.0705 . ## standLRT 0.55954 0.01245 4052.83930 44.950 &lt; 2e-16 *** ## sexM -0.17138 0.03276 3032.37966 -5.231 1.8e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) stnLRT ## standLRT -0.013 ## sexM -0.339 0.061 Variance partitioning / ANOVA Also variance partitioning is a bit tricky, as (see type I/II/III ANOVA discussion) fixed and random components of the model are in some way “correlated”. The question is: Do you want to count the random effect variance as “explained”, or “residual”. The most common approach is the hierarchical partitioning proposed by by Nakagawa &amp; Schielzeth 2013, Nakagawa et al. (2017), which is implemented in the MuMIn.{R} package. With this, we can run library(MuMIn) r.squaredGLMM(m2) ## R2m R2c ## [1,] 0.3303846 0.4210712 Interpretation R2m: Marginal \\({R}^{2}\\) value associated with fixed effects. R2c: Conditional \\({R}^{2}\\) value associated with fixed effects plus the random effects. 4.3.4 Case Study 2 - Honeybee Data Task This library(EcoData) str(bees) Perform the data analysis, according to the hypothesis above. Solution "],["GLMMs.html", "5 GLMMs 5.1 Basics 5.2 Dispersion Problems in GLMs 5.3 Case Studies", " 5 GLMMs 5.1 Basics Generalized linear models (GLMs) in R are fit with the glm() function. The main difference from lm() is that you can specify the ‘family’ parameter, which gives you the option to use different distributions than the normal distribution. The family argument also includes the link function. The link function internally transforms a linear model on the predictors, so that its response corresponds to the range of the outcome distribution. If you don’t specify a link, the default link for each family is chosen. The most important are Log link for Poisson family. Logit link for Bernoulli / Binomial family. Of course, there are many additional distributions that you could consider for your response. Here an overview of the most common choices: 5.1.1 A Binomial Example We want to look at the titanic data set. A cleaned version of this is in the package EcoData, which you have to install first from GitHub. If you haven’t already installed this package, I hope this works for you: install.packages(&quot;devtools&quot;) devtools::install_github(repo = &quot;florianhartig/EcoData&quot;, subdir = &quot;EcoData&quot;, dependencies = T, build_vignettes = T) Let’s look at the titanic data set included in EcoData: library(EcoData) ## ## Attaching package: &#39;EcoData&#39; ## The following object is masked from &#39;package:MASS&#39;: ## ## cement str(titanic) ## &#39;data.frame&#39;: 1309 obs. of 14 variables: ## $ pclass : int 1 1 1 1 1 1 1 1 1 1 ... ## $ survived : int 1 1 0 0 0 1 1 0 1 0 ... ## $ name : chr &quot;Allen, Miss. Elisabeth Walton&quot; &quot;Allison, Master. Hudson Trevor&quot; &quot;Allison, Miss. Helen Loraine&quot; &quot;Allison, Mr. Hudson Joshua Creighton&quot; ... ## $ sex : chr &quot;female&quot; &quot;male&quot; &quot;female&quot; &quot;male&quot; ... ## $ age : num 29 0.917 2 30 25 ... ## $ sibsp : int 0 1 1 1 1 0 1 0 2 0 ... ## $ parch : int 0 2 2 2 2 0 0 0 0 0 ... ## $ ticket : chr &quot;24160&quot; &quot;113781&quot; &quot;113781&quot; &quot;113781&quot; ... ## $ fare : num 211 152 152 152 152 ... ## $ cabin : chr &quot;B5&quot; &quot;C22 C26&quot; &quot;C22 C26&quot; &quot;C22 C26&quot; ... ## $ embarked : chr &quot;S&quot; &quot;S&quot; &quot;S&quot; &quot;S&quot; ... ## $ boat : chr &quot;2&quot; &quot;11&quot; &quot;&quot; &quot;&quot; ... ## $ body : int NA NA NA 135 NA NA NA NA NA 22 ... ## $ home.dest: chr &quot;St Louis, MO&quot; &quot;Montreal, PQ / Chesterville, ON&quot; &quot;Montreal, PQ / Chesterville, ON&quot; &quot;Montreal, PQ / Chesterville, ON&quot; ... mosaicplot( ~ survived + sex + pclass, data = titanic) titanic$pclass = as.factor(titanic$pclass) You can fit an lm, but the residual checks make it very evident that the data with a 0/1 response don’t fit to the assumption of an lm: fit = lm(survived ~ age, data = titanic) summary(fit) ## ## Call: ## lm(formula = survived ~ age, data = titanic) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.4642 -0.4156 -0.3796 0.5806 0.6867 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.464814 0.034973 13.291 &lt;2e-16 *** ## age -0.001894 0.001054 -1.796 0.0727 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4912 on 1044 degrees of freedom ## (263 observations deleted due to missingness) ## Multiple R-squared: 0.003082, Adjusted R-squared: 0.002127 ## F-statistic: 3.227 on 1 and 1044 DF, p-value: 0.07271 par(mfrow = c(2, 2)) plot(fit) Thus, what we want to fit is a logistic regression, which assumes a 0/1 response. In principle, this is distribution is called Bernoulli, but in R both 0/1 and k/n are called “binomial”, as Bernoulli is the special case of binomial where n = 1. m1 = glm(survived ~ sex, family = &quot;binomial&quot;, data = titanic) summary(m1) ## ## Call: ## glm(formula = survived ~ sex, family = &quot;binomial&quot;, data = titanic) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.6124 -0.6511 -0.6511 0.7977 1.8196 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.9818 0.1040 9.437 &lt;2e-16 *** ## sexmale -2.4254 0.1360 -17.832 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 1741.0 on 1308 degrees of freedom ## Residual deviance: 1368.1 on 1307 degrees of freedom ## AIC: 1372.1 ## ## Number of Fisher Scoring iterations: 4 Can you interpret the output? What do the regression coefficients mean? This is a bit tricky. First of all, remember, if you want predictions, you have to apply the link function on the linear predictor. Binomial uses per default the logistic link, to calculate the response use: plogis(0.98) # Women. ## [1] 0.7271082 plogis(0.98 - 2.43) # Men. ## [1] 0.1900016 You can also use the predict function, newDat = data.frame(sex = as.factor(c(&quot;female&quot;, &quot;male&quot;))) predict(m1, newdata = newDat, se = T) # Linear predictor. ## $fit ## 1 2 ## 0.981813 -1.443625 ## ## $se.fit ## 1 2 ## 0.10403774 0.08762108 ## ## $residual.scale ## [1] 1 predict(m1, newdata = newDat, se = T, type = &quot;response&quot;) # Response scale. ## $fit ## 1 2 ## 0.7274678 0.1909846 ## ## $se.fit ## 1 2 ## 0.02062636 0.01353829 ## ## $residual.scale ## [1] 1 or we just look at the effect plots library(effects) plot(allEffects(m1)) The same thing for a slightly more complicated model: m2 = glm(survived ~ sex*age, family = &quot;binomial&quot;, data = titanic) summary(m2) ## ## Call: ## glm(formula = survived ~ sex * age, family = &quot;binomial&quot;, data = titanic) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.0247 -0.7158 -0.5776 0.7707 2.2960 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.493381 0.254188 1.941 0.052257 . ## sexmale -1.154139 0.339337 -3.401 0.000671 *** ## age 0.022516 0.008535 2.638 0.008342 ** ## sexmale:age -0.046276 0.011216 -4.126 3.69e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 1414.6 on 1045 degrees of freedom ## Residual deviance: 1083.4 on 1042 degrees of freedom ## (263 observations deleted due to missingness) ## AIC: 1091.4 ## ## Number of Fisher Scoring iterations: 4 plot(allEffects(m2)) Note: Treatment coding for factors works as before. Age effects for male / female cannot directly be compared, because they are calculated at a different intercept, and through the nonlinear link, this leads to a different effect on the response. One option to solve this are the so-called odds ratios. Or just look at the response scale, e.g. via the effect plots, and interpret there! Residual checks Let’s check m2 from the Titanic example: m2 = glm(survived ~ sex*age, family = &quot;binomial&quot;, data = titanic) First of all: Due to an unfortunate programming choice in R (Nerds: Check class(m2)), the standard residual plots par(mfrow = c(2, 2)) plot(m2) still work, but they don’t look any better than before, because they still check for normality of the residuals, while we are interested in the question of whether the residuals are binomially distributed. The DHARMa.{R} package solves this problem. Load the DHARMa.{R} package, which should have been installed with EcoData already: library(DHARMa) Calculate residuals: res = simulateResiduals(m2) Standard plot: plot(res) Out of the help page: The function creates a plot with two panels. The left panel is a uniform Q-Q plot (calling plotQQunif), and the right panel shows residuals against predicted values (calling plotResiduals), with outliers highlighted in red. Very briefly, we would expect that a correctly specified model shows: A straight 1-1 line, as well as not significant of the displayed tests in the Q-Q-plot (left) -&gt; Evidence for a correct overall residual distribution (for more details on the interpretation of this plot, see help). Visual homogeneity of residuals in both vertical and horizontal direction, as well as no significance of quantile tests in the Residual vs. predicted plot (for more details on the interpretation of this plot, see help). Deviations from these expectations can be interpreted similarly to a linear regression. See the vignette for detailed examples. Also residuals against predictors shows no particular problem: par(mfrow = c(1, 2)) plotResiduals(m2, form = model.frame(m2)$age) plotResiduals(m2, form = model.frame(m2)$sex) Residuals against missing predictor show a clear problem: dataUsed = as.numeric(rownames(model.frame(m2))) plotResiduals(m2, form = titanic$pclass[dataUsed]) We will talk about DHARMa.{R} more later, see also comments on testing binomial GLMs here. 5.1.2 A Poisson Example library(EcoData) str(birdfeeding) ## &#39;data.frame&#39;: 25 obs. of 2 variables: ## $ feeding : int 3 6 8 4 2 7 6 8 10 3 ... ## $ attractiveness: int 1 1 1 1 1 2 2 2 2 2 ... plot(feeding ~ attractiveness, data = birdfeeding) fit = glm(feeding ~ attractiveness, data = birdfeeding, family = &quot;poisson&quot;) summary(fit) ## ## Call: ## glm(formula = feeding ~ attractiveness, family = &quot;poisson&quot;, data = birdfeeding) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.55377 -0.72834 0.03699 0.59093 1.54584 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.47459 0.19443 7.584 3.34e-14 *** ## attractiveness 0.14794 0.05437 2.721 0.00651 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 25.829 on 24 degrees of freedom ## Residual deviance: 18.320 on 23 degrees of freedom ## AIC: 115.42 ## ## Number of Fisher Scoring iterations: 4 Log link means that calculating predicted value for attractiveness requires exp(linear response). exp(1.47459 + 3 * 0.14794) ## [1] 6.810122 Effect plots, not the log scaling on the y axis plot(allEffects(fit)) Residual checks are OK. res = simulateResiduals(fit) plot(res) 5.1.3 Example - Elk Data Task Here a data set of habitat use of Elks in Canada. Measured is the presence of Elks (0/1), and a number of other predictors. Perform either: A predictive analysis, i.e. a model to predict where Elks can be found. A causal analysis, trying to understand the effect of roads on Elk presence. Solution a b 5.2 Dispersion Problems in GLMs The problem with functions such as the Poisson or the Binomial (for k/n data) is, unlike the normal distribution, they do not have a parameter for the dispersion. That is, unlike the normal distribution, which can have different levels of spread around the regression line, the Poisson distribution always assumes a certain mean corresponds to a fixed variance. This is obviously not always a good assumption. In most cases with count data, we actually find overdispersion (more dispersion than expected). You can, however, also have underdispersion, i.e. less dispersion than expected. Ways to treat this include Quasi-distributions, which are available in glm. Those add a term to the likelihood that corrects the p-values for the dispersion, but they are not distributions .-&gt; Can’t check residuals, no AIC. -&gt; Discouraged. Observation-level random effect (OLRE) - Add a separate random effect per observation. This effectively creates a normal random variate at the level of the linear predictor, increases variance on the responses. A GLM distribution with variable dispersion, for Poisson usually the negative binomial. Because the 3rd option gives us more possibilities to model e.g. heteroskedasticity later, its preferable over an OLRE. I would always recommend the third option. Example: library(glmmTMB) library(lme4) library(DHARMa) m1 = glm(count ~ spp + mined, family = poisson, data = Salamanders) summary(m1) ## ## Call: ## glm(formula = count ~ spp + mined, family = poisson, data = Salamanders) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.8155 -1.0024 -0.7241 0.0315 9.9255 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.33879 0.13811 -9.694 &lt; 2e-16 *** ## sppPR -1.38629 0.21517 -6.443 1.17e-10 *** ## sppDM 0.23052 0.12889 1.789 0.0737 . ## sppEC-A -0.77011 0.17105 -4.502 6.73e-06 *** ## sppEC-L 0.62117 0.11931 5.206 1.92e-07 *** ## sppDES-L 0.67916 0.11813 5.749 8.96e-09 *** ## sppDF 0.08004 0.13344 0.600 0.5486 ## minedno 2.03676 0.11092 18.363 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 2120.7 on 643 degrees of freedom ## Residual deviance: 1310.3 on 636 degrees of freedom ## AIC: 2049.6 ## ## Number of Fisher Scoring iterations: 6 res = simulateResiduals(m1, plot = T) # Looks overdispersed, additional check. testDispersion(res) ## ## DHARMa nonparametric dispersion test via sd of residuals fitted vs. ## simulated ## ## data: simulationOutput ## dispersion = 3.9152, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided # Add random effect for site. m2 = glmer(count ~ spp + mined + (1|site), family = poisson, data = Salamanders) summary(m2) ## Generalized linear mixed model fit by maximum likelihood (Laplace ## Approximation) [glmerMod] ## Family: poisson ( log ) ## Formula: count ~ spp + mined + (1 | site) ## Data: Salamanders ## ## AIC BIC logLik deviance df.resid ## 1962.8 2003.0 -972.4 1944.8 635 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.6006 -0.7446 -0.4143 0.0836 11.7241 ## ## Random effects: ## Groups Name Variance Std.Dev. ## site (Intercept) 0.3313 0.5756 ## Number of obs: 644, groups: site, 23 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.62411 0.23853 -6.809 9.84e-12 *** ## sppPR -1.38623 0.21416 -6.473 9.61e-11 *** ## sppDM 0.23048 0.12829 1.797 0.0724 . ## sppEC-A -0.77012 0.17026 -4.523 6.09e-06 *** ## sppEC-L 0.62111 0.11875 5.230 1.69e-07 *** ## sppDES-L 0.67911 0.11758 5.776 7.66e-09 *** ## sppDF 0.08004 0.13282 0.603 0.5468 ## minedno 2.26373 0.27869 8.123 4.56e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) sppPR sppDM spEC-A spEC-L sDES-L sppDF ## sppPR -0.180 ## sppDM -0.300 0.334 ## sppEC-A -0.226 0.252 0.420 ## sppEC-L -0.324 0.361 0.602 0.454 ## sppDES-L -0.327 0.364 0.608 0.458 0.657 ## sppDF -0.290 0.322 0.538 0.406 0.582 0.587 ## minedno -0.733 0.000 0.000 0.000 0.000 0.000 0.000 res = simulateResiduals(m2, plot = T) # Now dispersion seems to be OK, rather another problem with heteroskedasticity, see next. # Just for the sake of completeness, if we would have still overdispersion, # these would be the two options: # Variable dispersion via OLRE. Salamanders$ID = 1:nrow(Salamanders) m3 = glmer(count ~ spp + mined + (1|site) + (1|ID), family = poisson, data = Salamanders) summary(m3) ## Generalized linear mixed model fit by maximum likelihood (Laplace ## Approximation) [glmerMod] ## Family: poisson ( log ) ## Formula: count ~ spp + mined + (1 | site) + (1 | ID) ## Data: Salamanders ## ## AIC BIC logLik deviance df.resid ## 1671.5 1716.2 -825.8 1651.5 634 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.122 -0.458 -0.286 0.139 2.736 ## ## Random effects: ## Groups Name Variance Std.Dev. ## ID (Intercept) 1.0111 1.0055 ## site (Intercept) 0.2459 0.4958 ## Number of obs: 644, groups: ID, 644; site, 23 ## ## Fixed effects: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -2.1808 0.2838 -7.684 1.54e-14 *** ## sppPR -1.4120 0.3065 -4.606 4.10e-06 *** ## sppDM 0.3801 0.2354 1.615 0.106389 ## sppEC-A -0.7762 0.2710 -2.864 0.004185 ** ## sppEC-L 0.5243 0.2332 2.248 0.024561 * ## sppDES-L 0.8157 0.2279 3.579 0.000344 *** ## sppDF 0.2856 0.2386 1.197 0.231184 ## minedno 2.3197 0.2723 8.517 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) sppPR sppDM spEC-A spEC-L sDES-L sppDF ## sppPR -0.307 ## sppDM -0.477 0.405 ## sppEC-A -0.364 0.360 0.460 ## sppEC-L -0.474 0.412 0.541 0.467 ## sppDES-L -0.504 0.418 0.557 0.475 0.560 ## sppDF -0.480 0.400 0.532 0.455 0.537 0.553 ## minedno -0.658 -0.023 0.029 -0.015 0.026 0.042 0.037 ## optimizer (Nelder_Mead) convergence code: 0 (OK) ## Model failed to converge with max|grad| = 0.103661 (tol = 0.002, component 1) res = simulateResiduals(m3, plot = T) # Variable dispersion via negative binomial. m4 = glmmTMB(count ~ spp + mined + (1|site), family = nbinom2, data = Salamanders) summary(m4) ## Family: nbinom2 ( log ) ## Formula: count ~ spp + mined + (1 | site) ## Data: Salamanders ## ## AIC BIC logLik deviance df.resid ## 1672.4 1717.1 -826.2 1652.4 634 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## site (Intercept) 0.2945 0.5426 ## Number of obs: 644, groups: site, 23 ## ## Dispersion parameter for nbinom2 family (): 0.942 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.6832 0.2742 -6.140 8.28e-10 *** ## sppPR -1.3197 0.2875 -4.591 4.42e-06 *** ## sppDM 0.3686 0.2235 1.649 0.099056 . ## sppEC-A -0.7098 0.2530 -2.806 0.005017 ** ## sppEC-L 0.5714 0.2191 2.608 0.009105 ** ## sppDES-L 0.7929 0.2166 3.660 0.000252 *** ## sppDF 0.3120 0.2329 1.340 0.180337 ## minedno 2.2633 0.2838 7.975 1.53e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 res = simulateResiduals(m4, plot = T) 5.2.1 Heteroskedasticity in GLMMs GLM(M)s can be heteroskedastic as well, i.e. dispersion depends on some predictors. In glmmTMB.{R}, you can make the dispersion of the negative Binomial dependent on a formula via the dispformula.{R} argument, in the same way as in nlme.{R} for the linear model. Variance problems would show up when plotting residuals against predicted and predictors. On the previous page, we saw some variance problems in the Salamander model. We could add a variable dispersion model via m3 = glmmTMB(count ~ spp + mined + (1|site), family = nbinom1, dispformula = ~ spp + mined , data = Salamanders) summary(m3) ## Family: nbinom1 ( log ) ## Formula: count ~ spp + mined + (1 | site) ## Dispersion: ~spp + mined ## Data: Salamanders ## ## AIC BIC logLik deviance df.resid ## 1654.4 1730.3 -810.2 1620.4 627 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## site (Intercept) 0.2283 0.4778 ## Number of obs: 644, groups: site, 23 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.5288 0.2799 -5.462 4.70e-08 *** ## sppPR -1.3304 0.3480 -3.822 0.000132 *** ## sppDM 0.2695 0.2004 1.345 0.178561 ## sppEC-A -0.7525 0.2772 -2.714 0.006641 ** ## sppEC-L 0.6228 0.2109 2.952 0.003155 ** ## sppDES-L 0.7113 0.1976 3.600 0.000318 *** ## sppDF 0.1470 0.2171 0.677 0.498259 ## minedno 2.1348 0.2825 7.557 4.14e-14 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Dispersion model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.2834 0.6414 -0.442 0.6586 ## sppPR 0.3160 0.7501 0.421 0.6735 ## sppDM 0.1979 0.5712 0.346 0.7289 ## sppEC-A 0.3592 0.6477 0.554 0.5792 ## sppEC-L 1.0830 0.5215 2.077 0.0378 * ## sppDES-L 0.7951 0.5370 1.481 0.1387 ## sppDF 0.3769 0.6109 0.617 0.5373 ## minedno 0.5583 0.4187 1.334 0.1823 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 res = simulateResiduals(m3, plot = T) par(mfrow = c(1, 2)) plotResiduals(res, Salamanders$spp) plotResiduals(res, Salamanders$mined) 5.2.2 Zero-inflation Another common problem in count data (Poisson / negative binomial), but also other GLMs (e.g. beta) is that the observed data has more zeros than expected by the fitted distribution. To deal with this zero-inflation, we have to add an additional model component that controls how many zeros are produced. The default way to do this is assuming two separate processes which act after one another: A binomial model for 0 or not, if is not zero, a number from Poisson or negative binomial. Note that the result of 2. can again be zero, so there are two explanations for a zero in the data. Zero-inflated GLMMs can, for example, be fit with the glmmTMB.{R} package, using ziformula = ~ 0. How to check for zero-inflation Important: Do not check for zero-inflation in the response. DHARMa.{R} has a function for testing zero-inflation: m4 = glmmTMB(count ~ spp + mined + (1|site), family = nbinom2, data = Salamanders) summary(m4) ## Family: nbinom2 ( log ) ## Formula: count ~ spp + mined + (1 | site) ## Data: Salamanders ## ## AIC BIC logLik deviance df.resid ## 1672.4 1717.1 -826.2 1652.4 634 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## site (Intercept) 0.2945 0.5426 ## Number of obs: 644, groups: site, 23 ## ## Dispersion parameter for nbinom2 family (): 0.942 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.6832 0.2742 -6.140 8.28e-10 *** ## sppPR -1.3197 0.2875 -4.591 4.42e-06 *** ## sppDM 0.3686 0.2235 1.649 0.099056 . ## sppEC-A -0.7098 0.2530 -2.806 0.005017 ** ## sppEC-L 0.5714 0.2191 2.608 0.009105 ** ## sppDES-L 0.7929 0.2166 3.660 0.000252 *** ## sppDF 0.3120 0.2329 1.340 0.180337 ## minedno 2.2633 0.2838 7.975 1.53e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 res = simulateResiduals(m4, plot = T) testZeroInflation(res) ## ## DHARMa zero-inflation test via comparison to expected zeros with ## simulation under H0 = fitted model ## ## data: simulationOutput ## ratioObsSim = 1.0172, p-value = 0.744 ## alternative hypothesis: two.sided Problem with this: When there is really zero-inflation, variable dispersion models such as the Poisson often simply increase the dispersion to account for the zeros, leading to no apparent zero-inflation in the residuals, but rather underdispersion. Thus, if you see underdispersion in variable-dispersion GLM for count data, check for zero-inflation. Reliable check is to simply compare a zero-inflation model via AIC or likelihood ratio test. 5.2.3 P-hacking Link Collection In the context of GLM(M)s, you have also to be careful about p-hacking. See 3.3.4. 5.3 Case Studies Strategy for analysis: Define formula via scientific questions + confounders. Define type of GLM (lm, logistic, Poisson). Blocks in data -&gt; Random effects, start with random intercept. Fit this base model, then do residual checks for Wrong functional form -&gt; Change fitted function. Wrong distribution-&gt; Transformation or GLM adjustment. (Over)dispersion -&gt; Variable dispersion GLM. Heteroskedasticity -&gt; Model dispersion. Zero-inflation -&gt; Add ZIP term. … And adjust the model accordingly. 5.3.1 Owls Task Look at the Owl data set in the glmmTMB.{R} package. The initial hypothesis is m1 = glm(SiblingNegotiation ~ FoodTreatment*SexParent + offset(log(BroodSize)), data = Owls , family = poisson) res = simulateResiduals(m1) plot(res) The offset is a special command that can be used in all regression models. First, try to understand what the offset does! Then, try to improve the model with everything we have discussed so far. Possible solution m1 = glmmTMB::glmmTMB(SiblingNegotiation ~ FoodTreatment * SexParent + (1|Nest) + offset(log(BroodSize)), data = Owls , family = nbinom1, dispformula = ~ FoodTreatment + SexParent, ziformula = ~ FoodTreatment + SexParent) summary(m1) ## Family: nbinom1 ( log ) ## Formula: ## SiblingNegotiation ~ FoodTreatment * SexParent + (1 | Nest) + ## offset(log(BroodSize)) ## Zero inflation: ~FoodTreatment + SexParent ## Dispersion: ~FoodTreatment + SexParent ## Data: Owls ## ## AIC BIC logLik deviance df.resid ## 3354.6 3402.9 -1666.3 3332.6 588 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## Nest (Intercept) 0.0876 0.296 ## Number of obs: 599, groups: Nest, 27 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.80028 0.09736 8.220 &lt; 2e-16 *** ## FoodTreatmentSatiated -0.46893 0.16760 -2.798 0.00514 ** ## SexParentMale -0.09127 0.09247 -0.987 0.32363 ## FoodTreatmentSatiated:SexParentMale 0.13087 0.19028 0.688 0.49158 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Zero-inflation model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.9132 0.3269 -5.853 4.84e-09 *** ## FoodTreatmentSatiated 1.0564 0.4072 2.594 0.00948 ** ## SexParentMale -0.4688 0.3659 -1.281 0.20012 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Dispersion model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.2122 0.2214 5.475 4.37e-08 *** ## FoodTreatmentSatiated 0.7978 0.2732 2.920 0.0035 ** ## SexParentMale -0.1540 0.2399 -0.642 0.5209 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 res = simulateResiduals(m1, plot = T) testDispersion(m1) ## ## DHARMa nonparametric dispersion test via sd of residuals fitted vs. ## simulated ## ## data: simulationOutput ## dispersion = 0.78311, p-value = 0.104 ## alternative hypothesis: two.sided testZeroInflation(m1) ## ## DHARMa zero-inflation test via comparison to expected zeros with ## simulation under H0 = fitted model ## ## data: simulationOutput ## ratioObsSim = 1.0465, p-value = 0.608 ## alternative hypothesis: two.sided 5.3.2 Hurricanes Task In https://www.pnas.org/content/111/24/8782, Jung et al. claim that “Female hurricanes are deadlier than male hurricanes”. Specifically, they analyze the number of hurricane fatalities, and claim that there is an effect of the femininity of the name on the number of fatalities, correcting for several possible confounders. They interpret the result as causal (including mediators), claiming that giving only male names to hurricanes would considerably reduce death toll. The data is available at: https://elearning.uni-regensburg.de/pluginfile.php/2365101/mod_book/chapter/48142/Hurricanes.Rdata. You can adopt the file’s path and use the following code to read in the data: library(readxl) Data = read_excel(&quot;/tmp/pnas.1402786111.sd01.xlsx&quot;, n_max = 92) Data = as.data.frame(Data) str(Data) Some plots: plot(Data$MasFem, Data$NDAM, cex = 0.5, pch = 5) points(Data$MasFem, Data$NDAM, cex = Data$alldeaths/20, pch = 4, col= &quot;red&quot;) The original model from the paper fits a negative binomial, using mgcv.{R}. originalModelGAM = gam(alldeaths ~ MasFem * (Minpressure_Updated.2014 + NDAM), data = Data, family = nb, na.action = &quot;na.fail&quot;) summary(originalModelGAM) Tasks: Confirm that you get the same results as in the paper. Forget what they did. Go back to start, do a causal analysis like we did, and do your own model, diagnosing all residual problems that we discussed. Solution 5.3.3 Researchers Degrees of Freedom — Skin Color and Red Cards In 2018 Silberzahn et al. published a “meta analysis” in Advances in Methods and Practices in Psychological Science, where they had provided 29 teams with the same data set to answer one research question: “[W]hether soccer players with dark skin tone are more likely than those with light skin tone to receive red cards from referees”. Spoiler: They found that the “[a]nalytic approaches varied widely across the teams, and the estimated effect sizes ranged from 0.89 to 2.93 (Mdn = 1.31) in odds-ratio units”, highlighting that different approaches in data analysis can yield significant variation in the results. You can find the paper “Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results” at: https://journals.sagepub.com/doi/10.1177/2515245917747646. Task Do a re-analysis of the data as if you were the 30th team to contribute the results to the meta analysis. Download the data file “CrowdstormingDataJuly1st.csv” here: https://osf.io/fv8c3/. Variable explanations are provided in the README: https://osf.io/9yh4x/. Analyze the data. Given the research question, the selected variables are: Response variable: ‘redCards’ (+‘yellowReds’?). Multiple variables, potentially accounting for confounding, offsetting, grouping, … are included in the data. primary predictors: ‘rater1’, ‘rater2’ These variables reflect ratings of “two independent raters blind to the research question who, based on their profile photo, categorized players on a 5-point scale ranging from (1) very light skin to (5) very dark skin. Make sure that ‘rater1’ and ‘rater2’ are rescaled to the range 0 … 1 as described in the paper (“This variable was rescaled to be bounded by 0 (very light skin) and 1 (very dark skin) prior to the final analysis, to ensure consistency of effect sizes across the teams of analysts. The raw ratings were rescaled to 0, .25, .50, .75, and 1 to create this new scale.”) Research the concept of odd ratios and convert your effect estimate into this format. Are your results within the range of estimates from the 29 teams in Silberzahn et al. (2018)? Have a look at the other modelling teams. Do you understand the models they fit? Solution 5.3.4 Marmots Task Analyze the Marmot data. Available at http://highstat.com/Books/Book4/Marmots.txt. You can read the URL directly with R, no need to download. A description of the data is available https://osf.io/9yh4x/. Use the following snippet to read in the data: marmots = read.table(url(&quot;http://highstat.com/Books/Book4/Marmots.txt&quot;)) Solution "],["correlation.html", "6 Correlation structures 6.1 General Idea 6.2 Temporal and Spatial Correlation Structures 6.3 Phylogenetic Structures (PGLS) 6.4 Exercices 6.5 Intro Bayes", " 6 Correlation structures This chapter explains how to model correlation structures in the residuals. 6.1 General Idea Except for the random effects, we have so far assumed that observations are independent. We will now relax this assumption. As a motivation, you can skim the following paper from Roberts et al., 2016. We have already discussed random effects, which is a grouped correlation. All of the other three correlation structures discussed here are different. They are distance-based correlations between data points. Distance is expressed, e.g., by: Spatial distance. Temporal distance. Phylogenetic distance. For either of these structures, there can be two phenomena that lead to correlations: There can be a trend in the given space (e.g. time, space), which we have to remove first. After accounting for the trend, there can be a so-called autocorrelation between data points. The idea of the so-called conditional autoregressive (CAR) structures is, that we make parametric assumptions for how the correlation between data points falls off with distance. Then, we fit the model with this structure. Similar as for the variance modelling, we can add this structures either in nlme::gls, see https://stat.ethz.ch/R-manual/R-devel/library/nlme/html/corClasses.html, or in glmmTMB, see https://cran.r-project.org/web/packages/glmmTMB/vignettes/covstruct.html. The following pages provide examples and further comments on how to do this. 6.2 Temporal and Spatial Correlation Structures In principle, spatial and temporal correlation are quite similar, there are 2 options we can have: There is a spatial trend in time / space, which creates a correlation in space / time. There truly is a spatial correlation, after accounting for the trend. Unfortunately, the distinction between a larger trend and a correlation is quite fluid. Nevertheless, one should always first check for and remove the trend, typically by including time/space as a predictor, potentially in a flexible way (GAMs come in handy). After this is done, we can fit a model with a temporally/spatially correlated error. Temporal correlation As our first example, I look at the hurricane study from yesterday, which is, after all, temporal data. library(EcoData) library(glmmTMB) library(DHARMa) originalModelGAM = glmmTMB(alldeaths ~ scale(MasFem) * (scale(Minpressure_Updated_2014) + scale(NDAM)), data = hurricanes, family = nbinom2) # Residual checks with DHARMa. res = simulateResiduals(originalModelGAM) plot(res) # No significant deviation in the general plot, but try this, which was highlighted by # https://www.theguardian.com/science/grrlscientist/2014/jun/04/hurricane-gender-name-bias-sexism-statistics plotResiduals(res, hurricanes$NDAM) # We also find temporal autocorrelation. res2 = recalculateResiduals(res, group = hurricanes$Year) testTemporalAutocorrelation(res2, time = unique(hurricanes$Year)) A second example from Pinheiro and Bates, pp. 255-258. The data originates from Vonesh and Carter (1992), who describe data measured on high-flux hemodialyzers to assess their in vivo ultrafiltration characteristics. The ultrafiltration rates (in mL/hr) of 20 high-flux dialyzers were measured at seven different transmembrane pressures (in dmHg). The in vitro evaluation of the dialyzers used bovine blood at flow rates of either 200~dl/min or 300~dl/min. The data, are also analyzed in Littell, Milliken, Stroup and Wolfinger (1996). See ?Dialyzer for explanation of the variables (data comes with the package nlme.{R}). The data highlights the flexibility of gls for structured ( 1| subject) temporal data. Unfortunately, nlme.{R} does not interface with DHARMa.{R}. library(nlme) fm1Dial.gls = gls(rate ~(pressure + I(pressure^2) + I(pressure^3) + I(pressure^4))*QB, data = Dialyzer) plot(fm1Dial.gls) fm2Dial.gls = update(fm1Dial.gls, weights = varPower(form = ~ pressure)) plot(fm2Dial.gls) fm3Dial.gls = update(fm2Dial.gls, corr = corAR1(0.771, form = ~ 1 | Subject)) summary(fm3Dial.gls) ## Generalized least squares fit by REML ## Model: rate ~ (pressure + I(pressure^2) + I(pressure^3) + I(pressure^4)) * QB ## Data: Dialyzer ## AIC BIC logLik ## 642.6746 679.9526 -308.3373 ## ## Correlation Structure: AR(1) ## Formula: ~1 | Subject ## Parameter estimate(s): ## Phi ## 0.7526038 ## Variance function: ## Structure: Power of variance covariate ## Formula: ~pressure ## Parameter estimates: ## power ## 0.5182386 ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) -16.81845 1.050536 -16.009405 0.0000 ## pressure 92.33424 5.266862 17.531167 0.0000 ## I(pressure^2) -49.26516 6.995059 -7.042851 0.0000 ## I(pressure^3) 11.39968 3.454779 3.299683 0.0012 ## I(pressure^4) -1.01964 0.558637 -1.825226 0.0703 ## QB300 -1.59419 1.598447 -0.997336 0.3205 ## pressure:QB300 1.70543 7.757062 0.219855 0.8263 ## I(pressure^2):QB300 2.12680 10.147281 0.209593 0.8343 ## I(pressure^3):QB300 0.47971 4.968707 0.096547 0.9232 ## I(pressure^4):QB300 -0.22064 0.799379 -0.276019 0.7830 ## ## Correlation: ## (Intr) pressr I(p^2) I(p^3) I(p^4) QB300 p:QB30 I(^2): ## pressure -0.891 ## I(pressure^2) 0.837 -0.959 ## I(pressure^3) -0.773 0.895 -0.981 ## I(pressure^4) 0.718 -0.838 0.946 -0.990 ## QB300 -0.657 0.585 -0.550 0.508 -0.472 ## pressure:QB300 0.605 -0.679 0.651 -0.608 0.569 -0.900 ## I(pressure^2):QB300 -0.577 0.661 -0.689 0.676 -0.652 0.845 -0.960 ## I(pressure^3):QB300 0.538 -0.622 0.682 -0.695 0.688 -0.780 0.898 -0.982 ## I(pressure^4):QB300 -0.502 0.586 -0.661 0.692 -0.699 0.724 -0.840 0.947 ## I(^3): ## pressure ## I(pressure^2) ## I(pressure^3) ## I(pressure^4) ## QB300 ## pressure:QB300 ## I(pressure^2):QB300 ## I(pressure^3):QB300 ## I(pressure^4):QB300 -0.990 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -2.44570115 -0.67381573 0.07715872 0.68039816 2.21585297 ## ## Residual standard error: 3.046316 ## Degrees of freedom: 140 total; 130 residual Spatial models We will use a data set with thick densities and a spatial (soil) predictor. Read in data spdata = read.table(&quot;https://stats.idre.ucla.edu/stat/r/faq/thick.csv&quot;, header = T, sep = &quot;,&quot;, row.names = 1) Fit the model: library(DHARMa) library(gstat) plot(thick ~ soil, data = spdata) fit = lm(thick ~ soil, data = spdata) summary(fit) ## ## Call: ## lm(formula = thick ~ soil, data = spdata) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.0414 -1.1975 0.0876 1.4836 4.9584 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 31.9420 3.1570 10.118 1.54e-15 *** ## soil 2.2552 0.8656 2.605 0.0111 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.278 on 73 degrees of freedom ## Multiple R-squared: 0.08508, Adjusted R-squared: 0.07254 ## F-statistic: 6.788 on 1 and 73 DF, p-value: 0.01111 # Quantile residuals are not actually needed in this case but # DHARMa includes a test for spatial autocorrelation which # will save us coding time res = simulateResiduals(fit) testSpatialAutocorrelation(res, x = spdata$north, y = spdata$east) ## ## DHARMa Moran&#39;s I test for distance-based autocorrelation ## ## data: res ## observed = 0.210870, expected = -0.013514, sd = 0.021940, p-value &lt; ## 2.2e-16 ## alternative hypothesis: Distance-based autocorrelation # Looking also at the directional variogram tann.dir.vgm = variogram(residuals(fit) ~ 1, loc =~ east + north, data = spdata, alpha = c(0, 45, 90, 135)) plot(tann.dir.vgm) Remove trend via a GAM: library(mgcv) library(modEvA) fit1 = gam(thick ~ soil + te(east, north) , data = spdata) summary(fit1) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## thick ~ soil + te(east, north) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 39.68933 0.26498 149.780 &lt;2e-16 *** ## soil 0.12363 0.07275 1.699 0.0952 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## te(east,north) 21.09 22.77 721.3 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.996 Deviance explained = 99.7% ## GCV = 0.033201 Scale est. = 0.022981 n = 75 plot(fit1, pages = 0, lwd = 2) col = colorRamp(c(&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;))(range01(residuals(fit1))) plot(spdata$east, spdata$north, col = rgb(col, maxColorValue = 255) ) Almost the same, but simpler: fit = lm(thick ~ soil + north + I(north^2), data = spdata) Alternatively, fit an autoregressive model. Of course, both options can be combined. fit2 = gls(thick ~ soil , correlation = corExp(form =~ east + north) , data = spdata) summary(fit2) ## Generalized least squares fit by REML ## Model: thick ~ soil ## Data: spdata ## AIC BIC logLik ## 164.3474 173.5092 -78.17368 ## ## Correlation Structure: Exponential spatial correlation ## Formula: ~east + north ## Parameter estimate(s): ## range ## 719.4121 ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 42.81488 5.314541 8.056176 0.0000 ## soil 0.02662 0.199737 0.133289 0.8943 ## ## Correlation: ## (Intr) ## soil -0.12 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -1.5811122 -0.7276873 -0.5028102 -0.2092991 0.3217326 ## ## Residual standard error: 5.573087 ## Degrees of freedom: 75 total; 73 residual fit1 = gls(thick ~ soil + north + I(north^2), data = spdata) anova(fit1, fit2) ## Model df AIC BIC logLik Test L.Ratio p-value ## fit1 1 5 278.7468 290.0602 -134.37340 ## fit2 2 4 164.3474 173.5092 -78.17368 1 vs 2 112.3994 &lt;.0001 6.3 Phylogenetic Structures (PGLS) This is mostly taken from https://lukejharmon.github.io/ilhabela/instruction/2015/07/03/PGLS/. The two datasets associated with this example are in the EcoData package. Perform analysis: library(EcoData) library(ape) library(geiger) library(nlme) library(phytools) library(DHARMa) To plot the phylogenetic tree, use plot(anolisTree) ## $tree_not_data ## [1] &quot;ahli&quot; &quot;alayoni&quot; &quot;alfaroi&quot; &quot;aliniger&quot; ## [5] &quot;allisoni&quot; &quot;allogus&quot; &quot;altitudinalis&quot; &quot;alumina&quot; ## [9] &quot;alutaceus&quot; &quot;angusticeps&quot; &quot;argenteolus&quot; &quot;argillaceus&quot; ## [13] &quot;armouri&quot; &quot;bahorucoensis&quot; &quot;baleatus&quot; &quot;baracoae&quot; ## [17] &quot;barahonae&quot; &quot;barbatus&quot; &quot;barbouri&quot; &quot;bartschi&quot; ## [21] &quot;bremeri&quot; &quot;breslini&quot; &quot;brevirostris&quot; &quot;caudalis&quot; ## [25] &quot;centralis&quot; &quot;chamaeleonides&quot; &quot;chlorocyanus&quot; &quot;christophei&quot; ## [29] &quot;clivicola&quot; &quot;coelestinus&quot; &quot;confusus&quot; &quot;cooki&quot; ## [33] &quot;cristatellus&quot; &quot;cupeyalensis&quot; &quot;cuvieri&quot; &quot;cyanopleurus&quot; ## [37] &quot;cybotes&quot; &quot;darlingtoni&quot; &quot;distichus&quot; &quot;dolichocephalus&quot; ## [41] &quot;equestris&quot; &quot;etheridgei&quot; &quot;eugenegrahami&quot; &quot;evermanni&quot; ## [45] &quot;fowleri&quot; &quot;garmani&quot; &quot;grahami&quot; &quot;guafe&quot; ## [49] &quot;guamuhaya&quot; &quot;guazuma&quot; &quot;gundlachi&quot; &quot;haetianus&quot; ## [53] &quot;hendersoni&quot; &quot;homolechis&quot; &quot;imias&quot; &quot;inexpectatus&quot; ## [57] &quot;insolitus&quot; &quot;isolepis&quot; &quot;jubar&quot; &quot;krugi&quot; ## [61] &quot;lineatopus&quot; &quot;longitibialis&quot; &quot;loysiana&quot; &quot;lucius&quot; ## [65] &quot;luteogularis&quot; &quot;macilentus&quot; &quot;marcanoi&quot; &quot;marron&quot; ## [69] &quot;mestrei&quot; &quot;monticola&quot; &quot;noblei&quot; &quot;occultus&quot; ## [73] &quot;olssoni&quot; &quot;opalinus&quot; &quot;ophiolepis&quot; &quot;oporinus&quot; ## [77] &quot;paternus&quot; &quot;placidus&quot; &quot;poncensis&quot; &quot;porcatus&quot; ## [81] &quot;porcus&quot; &quot;pulchellus&quot; &quot;pumilis&quot; &quot;quadriocellifer&quot; ## [85] &quot;reconditus&quot; &quot;ricordii&quot; &quot;rubribarbus&quot; &quot;sagrei&quot; ## [89] &quot;semilineatus&quot; &quot;sheplani&quot; &quot;shrevei&quot; &quot;singularis&quot; ## [93] &quot;smallwoodi&quot; &quot;strahmi&quot; &quot;stratulus&quot; &quot;valencienni&quot; ## [97] &quot;vanidicus&quot; &quot;vermiculatus&quot; &quot;websteri&quot; &quot;whitemani&quot; ## ## $data_not_tree ## [1] &quot;1&quot; &quot;10&quot; &quot;100&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; ## [13] &quot;2&quot; &quot;20&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;25&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; &quot;29&quot; &quot;3&quot; ## [25] &quot;30&quot; &quot;31&quot; &quot;32&quot; &quot;33&quot; &quot;34&quot; &quot;35&quot; &quot;36&quot; &quot;37&quot; &quot;38&quot; &quot;39&quot; &quot;4&quot; &quot;40&quot; ## [37] &quot;41&quot; &quot;42&quot; &quot;43&quot; &quot;44&quot; &quot;45&quot; &quot;46&quot; &quot;47&quot; &quot;48&quot; &quot;49&quot; &quot;5&quot; &quot;50&quot; &quot;51&quot; ## [49] &quot;52&quot; &quot;53&quot; &quot;54&quot; &quot;55&quot; &quot;56&quot; &quot;57&quot; &quot;58&quot; &quot;59&quot; &quot;6&quot; &quot;60&quot; &quot;61&quot; &quot;62&quot; ## [61] &quot;63&quot; &quot;64&quot; &quot;65&quot; &quot;66&quot; &quot;67&quot; &quot;68&quot; &quot;69&quot; &quot;7&quot; &quot;70&quot; &quot;71&quot; &quot;72&quot; &quot;73&quot; ## [73] &quot;74&quot; &quot;75&quot; &quot;76&quot; &quot;77&quot; &quot;78&quot; &quot;79&quot; &quot;8&quot; &quot;80&quot; &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;84&quot; ## [85] &quot;85&quot; &quot;86&quot; &quot;87&quot; &quot;88&quot; &quot;89&quot; &quot;9&quot; &quot;90&quot; &quot;91&quot; &quot;92&quot; &quot;93&quot; &quot;94&quot; &quot;95&quot; ## [97] &quot;96&quot; &quot;97&quot; &quot;98&quot; &quot;99&quot; ## ## Call: ## lm(formula = hostility ~ awesomeness, data = anolisData) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.7035 -0.3065 -0.0416 0.2440 0.7884 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.10843 0.03953 2.743 0.00724 ** ## awesomeness -0.88116 0.03658 -24.091 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3807 on 98 degrees of freedom ## Multiple R-squared: 0.8555, Adjusted R-squared: 0.8541 ## F-statistic: 580.4 on 1 and 98 DF, p-value: &lt; 2.2e-16 ## $observed ## [1] 0.04121925 ## ## $expected ## [1] -0.01010101 ## ## $sd ## [1] 0.009665021 ## ## $p.value ## [1] 1.096872e-07 ## $observed ## [1] 0.05067625 ## ## $expected ## [1] -0.01010101 ## ## $sd ## [1] 0.00970256 ## ## $p.value ## [1] 3.751199e-10 ## ## DHARMa Moran&#39;s I test for distance-based autocorrelation ## ## data: res ## observed = 0.0509093, expected = -0.0101010, sd = 0.0097304, p-value = ## 3.609e-10 ## alternative hypothesis: Distance-based autocorrelation An old-school method to deal with the problem are the so-called Phylogenetically Independent Contrasts (PICs) (Felsenstein, J. (1985) “Phylogenies and the comparative method”. American Naturalist, 125, 1–15.). The idea here is to transform your data in a way that an lm is still appropriate. For completeness, I show the method here. # Extract columns. host = anolisData[, &quot;hostility&quot;] awe = anolisData[, &quot;awesomeness&quot;] # Give them names. names(host) = names(awe) = rownames(anolisData) # Calculate PICs. hPic = pic(host, anolisTree) ## Warning in pic(host, anolisTree): the names of argument &#39;x&#39; and the tip labels ## of the tree did not match: the former were ignored in the analysis. aPic = pic(awe, anolisTree) ## Warning in pic(awe, anolisTree): the names of argument &#39;x&#39; and the tip labels of ## the tree did not match: the former were ignored in the analysis. # Make a model. picModel = lm(hPic ~ aPic - 1) summary(picModel) # Yes, significant. ## ## Call: ## lm(formula = hPic ~ aPic - 1) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.30230 -0.23485 0.06003 0.34772 0.92222 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## aPic -0.91964 0.03887 -23.66 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4263 on 98 degrees of freedom ## Multiple R-squared: 0.851, Adjusted R-squared: 0.8495 ## F-statistic: 559.9 on 1 and 98 DF, p-value: &lt; 2.2e-16 # plot results. plot(hPic ~ aPic) abline(a = 0, b = coef(picModel)) Now, new school, with a PGLS pglsModel = gls(hostility ~ awesomeness, correlation = corBrownian(phy = anolisTree, form=~species), data = anolisData, method = &quot;ML&quot;) summary(pglsModel) ## Generalized least squares fit by maximum likelihood ## Model: hostility ~ awesomeness ## Data: anolisData ## AIC BIC logLik ## 42.26092 50.07643 -18.13046 ## ## Correlation Structure: corBrownian ## Formula: ~species ## Parameter estimate(s): ## numeric(0) ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 0.1158895 0.12500397 0.927087 0.3562 ## awesomeness -0.9196414 0.03886501 -23.662451 0.0000 ## ## Correlation: ## (Intr) ## awesomeness -0.065 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -1.49512017 -0.75193433 -0.06672209 0.56527753 2.04613817 ## ## Residual standard error: 0.4220369 ## Degrees of freedom: 100 total; 98 residual coef(pglsModel) ## (Intercept) awesomeness ## 0.1158895 -0.9196414 plot(hostility ~ awesomeness, data = anolisData) abline(pglsModel, col = &quot;red&quot;) OK, same result, but PGLS is WAY more flexible than PICs. For example, we can include a discrete predictor: pglsModel2 = gls(hostility ~ ecomorph, correlation = corBrownian(phy = anolisTree, form=~species), data = anolisData, method = &quot;ML&quot;) summary(pglsModel2) ## Generalized least squares fit by maximum likelihood ## Model: hostility ~ ecomorph ## Data: anolisData ## AIC BIC logLik ## 235.1126 255.954 -109.5563 ## ## Correlation Structure: corBrownian ## Formula: ~species ## Parameter estimate(s): ## numeric(0) ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 0.2280018 0.3630767 0.6279713 0.5316 ## ecomorphGB -0.2737370 0.2128984 -1.2857635 0.2017 ## ecomorphT -0.2773801 0.3872137 -0.7163490 0.4756 ## ecomorphTC -0.5457771 0.2449466 -2.2281475 0.0283 ## ecomorphTG -0.2645627 0.2084928 -1.2689297 0.2076 ## ecomorphTW -0.5388436 0.2370223 -2.2733878 0.0253 ## ecomorphU -0.3013944 0.2264264 -1.3310922 0.1864 ## ## Correlation: ## (Intr) ecmrGB ecmrpT ecmrTC ecmrTG ecmrTW ## ecomorphGB -0.385 ## ecomorphT -0.276 0.360 ## ecomorphTC -0.369 0.626 0.349 ## ecomorphTG -0.426 0.638 0.431 0.608 ## ecomorphTW -0.372 0.626 0.377 0.588 0.641 ## ecomorphU -0.395 0.597 0.394 0.587 0.647 0.666 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -2.57909973 -0.62394508 0.03716963 0.49997446 2.33859983 ## ## Residual standard error: 1.05295 ## Degrees of freedom: 100 total; 93 residual anova(pglsModel2) ## Denom. DF: 93 ## numDF F-value p-value ## (Intercept) 1 0.0555807 0.8141 ## ecomorph 6 1.2170027 0.3046 # We can even include multiple predictors: pglsModel3 = gls(hostility ~ ecomorph * awesomeness, correlation = corBrownian(phy = anolisTree, form=~species), data = anolisData, method = &quot;ML&quot;) summary(pglsModel3) ## Generalized least squares fit by maximum likelihood ## Model: hostility ~ ecomorph * awesomeness ## Data: anolisData ## AIC BIC logLik ## 53.36917 92.44673 -11.68459 ## ## Correlation Structure: corBrownian ## Formula: ~species ## Parameter estimate(s): ## numeric(0) ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 0.2740102 0.14336154 1.911323 0.0593 ## ecomorphGB -0.2079698 0.08757937 -2.374644 0.0198 ## ecomorphT -0.1751884 0.15478802 -1.131795 0.2609 ## ecomorphTC -0.2030466 0.10752002 -1.888454 0.0623 ## ecomorphTG -0.1260964 0.08339737 -1.511994 0.1342 ## ecomorphTW -0.1600076 0.09700188 -1.649531 0.1027 ## ecomorphU -0.1244498 0.09457082 -1.315943 0.1917 ## awesomeness -1.0131496 0.08971063 -11.293529 0.0000 ## ecomorphGB:awesomeness 0.0750120 0.08289316 0.904924 0.3680 ## ecomorphT:awesomeness 0.1373797 0.11770513 1.167152 0.2464 ## ecomorphTC:awesomeness 0.1161086 0.11490811 1.010447 0.3151 ## ecomorphTG:awesomeness 0.1666831 0.09824670 1.696577 0.0934 ## ecomorphTW:awesomeness 0.0120495 0.11532810 0.104480 0.9170 ## ecomorphU:awesomeness 0.0283477 0.10510376 0.269711 0.7880 ## ## Correlation: ## (Intr) ecmrGB ecmrpT ecmrTC ecmrTG ecmrTW ecmrpU awsmns ## ecomorphGB -0.398 ## ecomorphT -0.289 0.372 ## ecomorphTC -0.361 0.598 0.357 ## ecomorphTG -0.435 0.647 0.447 0.579 ## ecomorphTW -0.377 0.644 0.391 0.579 0.657 ## ecomorphU -0.403 0.589 0.424 0.546 0.658 0.666 ## awesomeness -0.104 0.123 0.045 0.078 0.046 0.005 0.108 ## ecomorphGB:awesomeness 0.129 -0.280 -0.095 -0.171 -0.151 -0.191 -0.184 -0.682 ## ecomorphT:awesomeness 0.082 -0.085 -0.074 -0.071 -0.036 -0.011 -0.111 -0.716 ## ecomorphTC:awesomeness 0.102 -0.120 -0.092 -0.359 -0.079 -0.091 -0.136 -0.695 ## ecomorphTG:awesomeness 0.090 -0.073 -0.023 -0.058 -0.056 -0.036 -0.140 -0.811 ## ecomorphTW:awesomeness 0.051 -0.124 0.029 -0.054 -0.023 -0.052 -0.006 -0.666 ## ecomorphU:awesomeness 0.101 -0.129 -0.129 -0.143 -0.133 -0.122 -0.283 -0.672 ## ecmGB: ecmrT: ecmTC: ecmTG: ecmTW: ## ecomorphGB ## ecomorphT ## ecomorphTC ## ecomorphTG ## ecomorphTW ## ecomorphU ## awesomeness ## ecomorphGB:awesomeness ## ecomorphT:awesomeness 0.516 ## ecomorphTC:awesomeness 0.519 0.530 ## ecomorphTG:awesomeness 0.611 0.684 0.609 ## ecomorphTW:awesomeness 0.535 0.536 0.482 0.569 ## ecomorphU:awesomeness 0.515 0.535 0.644 0.626 0.480 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -1.6656909 -0.7164061 -0.1305515 0.6718348 1.7699106 ## ## Residual standard error: 0.3956912 ## Degrees of freedom: 100 total; 86 residual anova(pglsModel3) ## Denom. DF: 86 ## numDF F-value p-value ## (Intercept) 1 0.3640 0.5479 ## ecomorph 6 7.9691 &lt;.0001 ## awesomeness 1 517.8319 &lt;.0001 ## ecomorph:awesomeness 6 0.8576 0.5295 We can also assume that the error structure follows an Ornstein-Uhlenbeck model rather than Brownian motion. When trying this, however, I noted that the model does not converge due to a scaling problem. We can do a quick fix by making the branch lengths longer. This will not affect the analysis other than rescaling a nuisance parameter. tempTree = anolisTree tempTree$edge.length = tempTree$edge.length * 100 pglsModelLambda = gls(hostility ~ awesomeness, correlation = corPagel(1, phy = tempTree, fixed = FALSE, form=~species), data = anolisData, method = &quot;ML&quot;) summary(pglsModelLambda) ## Generalized least squares fit by maximum likelihood ## Model: hostility ~ awesomeness ## Data: anolisData ## AIC BIC logLik ## 43.64714 54.06782 -17.82357 ## ## Correlation Structure: corPagel ## Formula: ~species ## Parameter estimate(s): ## lambda ## 1.01521 ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 0.1170472 0.12862370 0.909997 0.3651 ## awesomeness -0.9248858 0.03870928 -23.893129 0.0000 ## ## Correlation: ## (Intr) ## awesomeness -0.062 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -1.46625592 -0.74557818 -0.06456682 0.54645141 2.02371257 ## ## Residual standard error: 0.4317018 ## Degrees of freedom: 100 total; 98 residual pglsModelOU = gls(hostility ~ awesomeness, correlation = corMartins(1, phy = tempTree, form=~species), data = anolisData) summary(pglsModelOU) ## Generalized least squares fit by REML ## Model: hostility ~ awesomeness ## Data: anolisData ## AIC BIC logLik ## 50.7625 61.10237 -21.38125 ## ## Correlation Structure: corMartins ## Formula: ~species ## Parameter estimate(s): ## alpha ## 0.003194918 ## ## Coefficients: ## Value Std.Error t-value p-value ## (Intercept) 0.1179388 0.4300640 0.274236 0.7845 ## awesomeness -0.9148437 0.0384949 -23.765320 0.0000 ## ## Correlation: ## (Intr) ## awesomeness -0.02 ## ## Standardized residuals: ## Min Q1 Med Q3 Max ## -1.11558554 -0.54574106 -0.05696661 0.40461428 1.48285459 ## ## Residual standard error: 0.5740297 ## Degrees of freedom: 100 total; 98 residual Other example: http://schmitzlab.info/pgls.html. For fitting PGLS with various models, you should also consider the caper package. 6.4 Exercices Task Fit either snouter plantcounts from package EcoData, and check for spatial dependencies in the residuals. See the data set’s help for details on the variables. Solution 6.5 Intro Bayes Intro Bayes will be done via a lecture Code for the lecture here. To fit Bayesian models, for full flexibility, most people use Stan. Stan is a completely new modelling specification language, therefore we won’t do this here. However, there is the brms package. brms allows you to specify regression models in the same syntax as lme4 / glmmTMB, but translates then to Stan code and fits them. Here a comparison: Extended syntax: Task Take any of our simpler models, and run them with brms! Solution library(brms) Bayesian model comparison: In Bayesian stats, there is no p-value. So, how do we know if something has an effect? There are two options: Just look at the effect size and its uncertainties. Compare the simpler with the more complex model, and calculate which has a higher posterior probability The latter is called posterior weights, and they are based on the so-called Bayes factor. For simple tests, e.g. t-test or lm, the Bayes factor is implemented in the BayesFactor package in R. Look at the examples here. "],["causal_inference.html", "7 Causal Inference, SEMs, Summary 7.1 Reminder: Modelling Strategy 7.2 Thoughts About the Analysis Pipeline 7.3 Bootstrap 7.4 Cross-validation 7.5 Null Models 7.6 Structural Equation Models (SEMs)", " 7 Causal Inference, SEMs, Summary 7.1 Reminder: Modelling Strategy Strategy for analysis: Define formula via scientific questions + confounders. Define type of GLM (lm, logistic, Poisson). Blocks in data -&gt; Random effects, start with random intercept. Fit this base model, then do residual checks for Wrong functional form -&gt; Change fitted function. Wrong distribution-&gt; Transformation or GLM adjustment. (Over)dispersion -&gt; Variable dispersion GLM. Heteroskedasticity -&gt; Model dispersion. Zero-inflation -&gt; Add ZIP term. Correlation -&gt; Add correlation structure. And adjust the model accordingly. Packages: baseR.{R}: lm.{R}, glm.{R}. lme4.{R}: mixed models, lmer.{R}, glmer.{R}. mgcv.{R}: GAM. nlme.{R}: Variance and correlations structure modelling for linear (mixed) models, using gls.{R} + lme.{R}. glmmTMB.{R}: Generalized linear mixed models with variance / correlation modelling and zip term. 7.2 Thoughts About the Analysis Pipeline In statistics, we rarely use a simple analysis. We often use an entire pipeline, consisting, for example, of the protocol that I sketched in chapter 5.3. What we should constantly ask ourselves: Is our pipeline good? By “good”, we typically mean: If 1000 analyses are run in that way: What is the typical error of the estimate? What is the Type I error (false positives)? Are the confidence intervals correctly calculated? … The way to check this is to run simulations. For example, the following function creates data that follows the assumptions of a linear regression with slope 0.5, then fits a linear regression, and returns the estimate getEstimate = function(n = 100){ x = runif(n) y = 0.5 * x + rnorm(n) fit = lm(y ~ x) x = summary(fit) return(x$coefficients[2, 1]) # Get fitted x weight (should be ~0.5). } The replicate function allows us to execute this 1000 times: set.seed(543210) out = replicate(1000, getEstimate()) Plotting the result, we can check whether the linear regression is an unbiased estimator for the slope. hist(out, breaks = 50) abline(v = 0.5, col = &quot;red&quot;) “Unbiased” means that, while each single estimate will have some error, the mean of many estimates will spread around the true value. Explicitly calculating these values Bias mean(out) - 0.5 # Should be ~0. ## [1] -0.001826401 Variance / standard deviation of the estimator sd(out) ## [1] 0.3587717 To check p-values, we could run: set.seed(12345) getEstimate = function(n = 100){ # Mind: Function has changed! x = runif(n) y = rnorm(n) # No dependence of x! Identical: y = 0 * x + rnorm(100). fit = lm(y ~ x) x = summary(fit) return(x$coefficients[2, 4]) # P-value for H0: Weight of x = 0. } out = replicate(2000, getEstimate()) hist(out) # Expected: Uniformly distributed p-values. -&gt; Check. mean(out &lt; 0.05) # Expected: ~0.05. But this is NO p-value... Check H0/H1! ## [1] 0.0515 # Explanation of syntax: Logical vectors are interpreted as vectors of 0s and 1s. To check the properties of other, possibly more complicated pipelines, statisticians will typically use the same technique. I recommend doing this! For example, you could modify the function above to have a non-normal error. How much difference does that make? Simulating often beats recommendations in the books! 7.3 Bootstrap Standard (non-parametric) bootstrap The bootstrap is a method to generate approximate confidence intervals based on resampling the data. Imagine you have some kind of weird data distribution: set.seed(123) data = ifelse(rbinom(100, 1, 0.5) == 1, rexp(100, 4) , rnorm(100, -2)) hist(data) We want to calculate the mean and it’s uncertainty. The mean is simple, but what is the uncertainty of the mean? The standard error can’t be used, because this is not a normal distribution. If we don’t know the distribution, we can’t use a parametric method to calculate the confidence interval. The solution is the bootstrap. The idea is the following: We re-sample from the data to generate an estimation of the uncertainty of the mean. Let’s first do this by hand: set.seed(123) performBootstrap = function(){ resampledData = sample(data, size = length(data), replace = T) return(mean(resampledData)) } bootstrappedMean = replicate(500, performBootstrap()) hist(bootstrappedMean, breaks = 50) abline(v = mean(data), col = &quot;red&quot;) Roughly, this distribution is the confidence interval for the mean for this particular distribution. In detail, there are a few tricks to correct confidence intervals for the bootstrap, which are implemented in the boot.{R} package. Here is how you would do a boostrap with the boot package. The trick here is to implement the function f().{R}, which must take the data as well as a selection of data points “k” (for example c(1,3,4,5,8,9), or 1:20, etc.) as input, and calculate the desired statistics. library(boot) f = function(d, k){ mean(d[k]) } out = boot(data, f, 500) plot(out) boot.ci(out) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 500 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = out) ## ## Intervals : ## Level Normal Basic ## 95% (-1.2730, -0.7144 ) (-1.2755, -0.7177 ) ## ## Level Percentile BCa ## 95% (-1.2427, -0.6849 ) (-1.2699, -0.7177 ) ## Calculations and Intervals on Original Scale ## Some BCa intervals may be unstable Task Calculate a bootstrapped confidence interval for the mean of this exponential distribution. Compare it to the naive standard error: set.seed(1234) data = rexp(500) Solution Jacknife An alternative to the bootstrap is the jacknife. From Wikipedia: In statistics, the jackknife is a resampling technique especially useful for variance and bias estimation. The jackknife predates other common resampling methods such as the bootstrap. The jackknife estimator of a parameter is found by systematically leaving out each observation from a data set and calculating the estimate and then finding the average of these calculations. Given a sample of size N, the jackknife estimate is found by aggregating the estimates of each N-1-sized sub-sample. The jackknife technique was developed by Maurice Quenouille (1949, 1956). John Tukey (1958) expanded on the technique and proposed the name “jackknife” since, like a physical jack-knife (a compact folding knife), it is a rough-and-ready tool that can improvise a solution for a variety of problems even though specific problems may be more efficiently solved with a purpose-designed tool. The jackknife is a linear approximation of the bootstrap. library(bootstrap) theta = function(x){ mean(x) } results = jackknife(data, theta) results$jack.se ## [1] 0.04727612 results$jack.bias ## [1] 0 Parametric bootstrap We call it a parametric bootstrap if we don’t re-sample the data to generate new data, but simulate from the fitted model. Simple example with a linear model: set.seed(123) x = runif(100, -2, 2) y = rnorm(100, 1 + 2*x, 1) dat = data.frame(x = x, y = y) m = lm(y ~ x) summary(m) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.23797 -0.61323 -0.01973 0.59633 2.21723 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.94612 0.09693 9.761 4e-16 *** ## x 1.97754 0.08546 23.141 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9693 on 98 degrees of freedom ## Multiple R-squared: 0.8453, Adjusted R-squared: 0.8437 ## F-statistic: 535.5 on 1 and 98 DF, p-value: &lt; 2.2e-16 We are interested in getting the confidence intervals for the coefficients of the model: resampledParameters = function(){ newData = dat newData$y = unlist(simulate(m)) mNew = lm(y ~ x, newData) return(coef(mNew)[1]) } bootstrappedIntercept = replicate(500, resampledParameters()) hist(bootstrappedIntercept, breaks = 50) abline(v = coef(m)[1], col = &quot;red&quot;) The same with the boot.{R} package. We need a statistics: foo = function(out){ m = lm(y ~ x, out) return(coef(m)) } and a function to create new data rgen = function(dat, mle){ out = dat out$y = unlist(simulate(mle)) return(out) } b2 = boot(dat, foo, R = 1000, sim = &quot;parametric&quot;, ran.gen = rgen, mle = m) boot.ci(b2, type = &quot;perc&quot;, index = 1) ## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS ## Based on 1000 bootstrap replicates ## ## CALL : ## boot.ci(boot.out = b2, type = &quot;perc&quot;, index = 1) ## ## Intervals : ## Level Percentile ## 95% ( 0.7534, 1.1287 ) ## Calculations and Intervals on Original Scale Application: Simulated likelihood ratio test The parametric bootstrap can be used to generate simulated likelihood ratio tests for mixed models. This allows us to test for the significance of variance components without specifying degrees of freedom. We could program this ourselves, but here is a package: library(pbkrtest) data(beets, package = &quot;pbkrtest&quot;) head(beets) ## harvest block sow yield sugpct ## 1 harv1 block1 sow3 128.0 17.1 ## 2 harv1 block1 sow4 118.0 16.9 ## 3 harv1 block1 sow5 95.0 16.6 ## 4 harv1 block1 sow2 131.0 17.0 ## 5 harv1 block1 sow1 136.5 17.0 ## 6 harv2 block2 sow3 136.5 17.0 ## Linear mixed effects model: sug = lmer(sugpct ~ block + sow + harvest + (1 | block:harvest), data = beets, REML = FALSE) sug.h = update(sug, .~. -harvest) sug.s = update(sug, .~. -sow) anova(sug, sug.h) ## Data: beets ## Models: ## sug.h: sugpct ~ block + sow + (1 | block:harvest) ## sug: sugpct ~ block + sow + harvest + (1 | block:harvest) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## sug.h 9 -69.084 -56.473 43.542 -87.084 ## sug 10 -79.998 -65.986 49.999 -99.998 12.914 1 0.0003261 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 PBmodcomp(sug, sug.h, nsim = 50) ## Bootstrap test; time: 0.45 sec; samples: 50; extremes: 5; ## large : sugpct ~ block + sow + harvest + (1 | block:harvest) ## sugpct ~ block + sow + (1 | block:harvest) ## stat df p.value ## LRT 12.914 1 0.0003261 *** ## PBtest 12.914 0.1176471 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anova(sug, sug.s) ## Data: beets ## Models: ## sug.s: sugpct ~ block + harvest + (1 | block:harvest) ## sug: sugpct ~ block + sow + harvest + (1 | block:harvest) ## npar AIC BIC logLik deviance Chisq Df Pr(&gt;Chisq) ## sug.s 6 -2.795 5.612 7.398 -14.795 ## sug 10 -79.998 -65.986 49.999 -99.998 85.203 4 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 PBmodcomp(sug, sug.s, nsim = 50) ## Bootstrap test; time: 0.38 sec; samples: 50; extremes: 0; ## large : sugpct ~ block + sow + harvest + (1 | block:harvest) ## sugpct ~ block + harvest + (1 | block:harvest) ## stat df p.value ## LRT 85.203 4 &lt; 2e-16 *** ## PBtest 85.203 0.01961 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 A similar approach is taken in RLRsim: library(RLRsim) library(lme4) set.seed(1234) g = rep(1:10, e = 10) x = rnorm(100) y = 0.1 * x + rnorm(100) m = lmer(y ~ x + (1|g), REML = FALSE) m0 = lm(y ~ 1) obs.LRT = 2*(logLik(m) - logLik(m0)) X = getME(m, &quot;X&quot;) Z = t(as.matrix(getME(m, &quot;Zt&quot;))) sim.LRT = LRTSim(X, Z, 1, diag(10)) pval = mean(sim.LRT &gt; obs.LRT) 7.4 Cross-validation Cross-validation is the non-parametric alternative to AIC. Note that AIC is asymptotically equal to leave-one-out cross-validation. For most advanced models, you will have to program the cross-validation by hand, but here an example for glm.{R}, using the cv.glm function: library(boot) # Leave-one-out and 6-fold cross-validation prediction error for the mammals data set. data(mammals, package=&quot;MASS&quot;) mammals.glm = glm(log(brain) ~ log(body), data = mammals) (cv.err = cv.glm(mammals, mammals.glm)$delta) ## [1] 0.4918650 0.4916571 (cv.err.6 = cv.glm(mammals, mammals.glm, K = 6)$delta) ## [1] 0.4787539 0.4776334 # As this is a linear model we could calculate the leave-one-out # cross-validation estimate without any extra model-fitting. muhat = fitted(mammals.glm) mammals.diag = glm.diag(mammals.glm) (cv.err = mean((mammals.glm$y - muhat)^2/(1 - mammals.diag$h)^2)) ## [1] 0.491865 # Leave-one-out and 11-fold cross-validation prediction error for # the nodal data set. Since the response is a binary variable an # appropriate cost function is cost = function(r, pi = 0){ mean(abs(r - pi) &gt; 0.5) } nodal.glm = glm(r ~ stage+xray+acid, binomial, data = nodal) (cv.err = cv.glm(nodal, nodal.glm, cost, K = nrow(nodal))$delta) ## [1] 0.1886792 0.1886792 (cv.11.err = cv.glm(nodal, nodal.glm, cost, K = 11)$delta) ## [1] 0.2264151 0.2228551 Note that cross-validation requires independence of data points. For non-independent data, it is possible to block the cross-validation, see Roberts, David R., et al. “Cross‐validation strategies for data with temporal, spatial, hierarchical, or phylogenetic structure.” Ecography 40.8 (2017): 913-929., methods implemented in package blockCV, see https://cran.r-project.org/web/packages/blockCV/vignettes/BlockCV_for_SDM.html. 7.5 Null Models Parametric hypothesis tests usually make a fixed assumption about H0. A non-parametric method to get around this that is used for complicated situations are randomization null models. The idea of these is to shuffle around the data, and thus generate a null distribution set.seed(1337) # Permutation t-test. # A hand-coded randomization test for comparing two groups with arbitrary distribution. groupA = rnorm(50) groupB = rlnorm(50) dat = data.frame(value = c(groupA, groupB), group = factor(rep(c(&quot;A&quot;, &quot;B&quot;), each = 50))) plot(value ~ group, data = dat) # Point here is that we can&#39;t do a t-test, because groups are not normal. We could do hist(dat$value, breaks = 40) reference = mean(groupA) - mean(groupB) nSim = 5000 nullDistribution = rep(NA, nSim) for(i in 1:nSim){ sel = dat$value[sample.int(100, size = 100)] nullDistribution[i] = mean(sel[1:50]) - mean(sel[51:100]) } hist(nullDistribution, xlim = c(-2,2)) abline(v = reference, col = &quot;red&quot;) ecdf(nullDistribution)(reference) ## [1] 0 Null models are used abundant, e.g., in packages: library(vegan).{R} library(bipartide).{R} 7.6 Structural Equation Models (SEMs) Structural equation models (SEMs) are models that are designed to estimate entire causal diagrams. For GLMs responses, you will currently have to estimate the DAG (directed acyclic graph) piece-wise, e.g. with https://cran.r-project.org/web/packages/piecewiseSEM/vignettes/piecewiseSEM.html. library(piecewiseSEM) mod = psem( lm(rich ~ distance + elev + abiotic + age + hetero + firesev + cover, data = keeley), lm(firesev ~ elev + age + cover, data = keeley), lm(cover ~ age + elev + hetero + abiotic, data = keeley) ) summary(mod) ## | | | 0% | |================== | 25% | |=================================== | 50% | |==================================================== | 75% | |======================================================================| 100% ## ## Structural Equation Model of mod ## ## Call: ## rich ~ distance + elev + abiotic + age + hetero + firesev + cover ## firesev ~ elev + age + cover ## cover ~ age + elev + hetero + abiotic ## ## AIC BIC ## 46.543 96.539 ## ## --- ## Tests of directed separation: ## ## Independ.Claim Test.Type DF Crit.Value P.Value ## cover ~ distance + ... coef 84 0.4201 0.6755 ## firesev ~ distance + ... coef 85 -0.8264 0.4109 ## firesev ~ abiotic + ... coef 85 -1.1799 0.2413 ## firesev ~ hetero + ... coef 85 -0.5755 0.5665 ## ## Global goodness-of-fit: ## ## Fisher&#39;s C = 6.543 with P-value = 0.587 and on 8 degrees of freedom ## ## --- ## Coefficients: ## ## Response Predictor Estimate Std.Error DF Crit.Value P.Value Std.Estimate ## rich distance 0.6157 0.1855 82 3.3195 0.0013 0.3599 ** ## rich elev -0.0092 0.0059 82 -1.5663 0.1211 -0.1569 ## rich abiotic 0.4881 0.1641 82 2.9741 0.0039 0.2482 ** ## rich age 0.0241 0.1097 82 0.2199 0.8265 0.0201 ## rich hetero 44.4135 10.8093 82 4.1088 0.0001 0.3376 *** ## rich firesev -1.0181 0.8031 82 -1.2677 0.2085 -0.1114 ## rich cover 12.3998 4.2206 82 2.9379 0.0043 0.2604 ** ## firesev elev -0.0006 0.0006 86 -0.9298 0.3551 -0.0874 ## firesev age 0.0473 0.0129 86 3.6722 0.0004 0.3597 *** ## firesev cover -1.5214 0.5204 86 -2.9236 0.0044 -0.2921 ** ## cover age -0.0101 0.0024 85 -4.1757 0.0001 -0.3991 *** ## cover elev 0.0004 0.0001 85 2.9688 0.0039 0.2999 ** ## cover hetero -0.7875 0.2719 85 -2.8960 0.0048 -0.2850 ** ## cover abiotic 0.0021 0.0042 85 0.4855 0.6286 0.0498 ## ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 ## ## --- ## Individual R-squared: ## ## Response method R.squared ## rich none 0.57 ## firesev none 0.30 ## cover none 0.26 plot(mod) For linear SEMs, we can estimate the entire DAG in one go. This also allows to have unobserved variables in the DAG. One of the most popular packages for this is lavaan.{R}: library(lavaan) mod = &quot; rich ~ distance + elev + abiotic + age + hetero + firesev + cover firesev ~ elev + age + cover cover ~ age + elev + abiotic &quot; fit = sem(mod, data = keeley) summary(fit) ## lavaan 0.6-11 ended normally after 1 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 16 ## ## Number of observations 90 ## ## Model Test User Model: ## ## Test statistic 10.437 ## Degrees of freedom 5 ## P-value (Chi-square) 0.064 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## rich ~ ## distance 0.616 0.177 3.485 0.000 ## elev -0.009 0.006 -1.644 0.100 ## abiotic 0.488 0.156 3.134 0.002 ## age 0.024 0.105 0.229 0.819 ## hetero 44.414 9.831 4.517 0.000 ## firesev -1.018 0.759 -1.341 0.180 ## cover 12.400 3.841 3.228 0.001 ## firesev ~ ## elev -0.001 0.001 -0.951 0.342 ## age 0.047 0.013 3.757 0.000 ## cover -1.521 0.509 -2.991 0.003 ## cover ~ ## age -0.009 0.002 -3.875 0.000 ## elev 0.000 0.000 2.520 0.012 ## abiotic -0.000 0.004 -0.115 0.909 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .rich 97.844 14.586 6.708 0.000 ## .firesev 1.887 0.281 6.708 0.000 ## .cover 0.081 0.012 6.708 0.000 Plot options … not so nice as before. library(lavaanPlot) ## Warning: package &#39;lavaanPlot&#39; was built under R version 4.1.1 lavaanPlot(model = fit) library(semPlot) ## Warning: package &#39;semPlot&#39; was built under R version 4.1.1 semPaths(fit) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
